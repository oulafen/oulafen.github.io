<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Oulafen&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/02cdf767a1a45af4c31abf0fd24ea02f</icon>
  <subtitle>Stay hungry, stay foolish...</subtitle>
  <link href="https://blog.oulafen.com/atom.xml" rel="self"/>
  
  <link href="https://blog.oulafen.com/"/>
  <updated>2021-10-22T17:04:16.658Z</updated>
  <id>https://blog.oulafen.com/</id>
  
  <author>
    <name>oulafen</name>
    <email>oulafen@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浏览器渲染流程</title>
    <link href="https://blog.oulafen.com/2020/07/30/browser-render/"/>
    <id>https://blog.oulafen.com/2020/07/30/browser-render/</id>
    <published>2020-07-30T03:02:34.000Z</published>
    <updated>2021-10-22T17:04:16.658Z</updated>
    
    <content type="html"><![CDATA[<p>本文整理了渲染的整个过程细节介绍：HTML-&gt;DOM树、样式计算、布局、图层、图层绘制、光栅化、合成和显示，以及重排和重绘触发原理及优化。<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="渲染流程"><a href="#渲染流程" class="headerlink" title="渲染流程"></a>渲染流程</h3><p><img src="https://statics.oulafen.com/browser-render-002.png" alt="image"></p><ul><li>渲染进程将HTML内容转换为能够读懂的DOM树结构。</li><li>渲染引擎将CSS样式表转化为浏览器可以理解的styleSheets，计算出DOM节点的样式。</li><li>创建布局树，并计算元素的布局信息。</li><li>对布局树进行分层，并生成分层树。</li><li>为每个图层生成绘制列表，并将其提交到合成线程。</li><li>合成线程将图层分成图块，并在光栅化线程池中将图块转换成位图。</li><li>合成线程发送绘制图块命令DrawQuad给浏览器进程。</li><li>浏览器进程根据DrawQuad消息生成页面，并显示到显示器上</li></ul><h3 id="重排（回流）和重绘"><a href="#重排（回流）和重绘" class="headerlink" title="重排（回流）和重绘"></a>重排（回流）和重绘</h3><ul><li><p>更新了元素的几何属性（重排reflow）<br><img src="https://statics.oulafen.com/browser-render-001.png" alt="image"><br>从上图可以看出，如果你通过JavaScript或者CSS修改元素的几何位置属性，例如改变元素的宽度、高度等，那么浏览器会触发重新布局，解析之后的一系列子阶段，这个过程就叫重排。无疑，重排需要更新完整的渲染流水线，所以开销也是最大的。</p></li><li><p>更新元素的绘制属性（重绘repaint）<br><img src="https://statics.oulafen.com/browser-render-0010.png" alt="image"><br>从图中可以看出，如果修改了元素的背景颜色，那么布局阶段将不会被执行，因为并没有引起几何位置的变换，所以就直接进入了绘制阶段，然后执行之后的一系列子阶段，这个过程就叫重绘。相较于重排操作，重绘省去了布局和分层阶段，所以执行效率会比重排操作要高一些。</p></li><li><p>3D变化直接合成阶段<br><img src="https://statics.oulafen.com/browser-render-0011.png" alt="image"><br>在上图中，我们使用了CSS的transform来实现动画效果，这可以避开重排和重绘阶段，直接在非主线程上执行合成动画操作。这样的效率是最高的，因为是在非主线程上合成，并没有占用主线程的资源，另外也避开了布局和绘制两个子阶段，所以相对于重绘和重排，合成能大大提升绘制效率。</p></li></ul><h4 id="优化-减少重排和重绘"><a href="#优化-减少重排和重绘" class="headerlink" title="优化-减少重排和重绘"></a>优化-减少重排和重绘</h4><ul><li>触发repaint reflow的操作尽量放在一起，比如改变dom高度和设置margin分开写，可能会出发两次重排</li><li>通过虚拟dom层计算出操作总得差异，一起提交给浏览器。比如使用createdocumentfragment来汇总append的dom,来减少触发重排重绘次数。</li></ul><h2 id="具体细节的原理"><a href="#具体细节的原理" class="headerlink" title="具体细节的原理"></a>具体细节的原理</h2><h3 id="样式计算生成CSSOM"><a href="#样式计算生成CSSOM" class="headerlink" title="样式计算生成CSSOM"></a>样式计算生成CSSOM</h3><p>样式计算的目的是为了计算出DOM节点中每个元素的具体样式，这个阶段大体可分为三步：</p><ol><li>把CSS转换为浏览器能够理解的结构styleSheets</li><li>转换样式表中的属性值，使其标准化<br> <img src="https://statics.oulafen.com/browser-render-style-01.png" alt="image"></li><li>计算出DOM树中每个节点的具体样式<br> <img src="https://statics.oulafen.com/browser-render-style-02.png" alt="image"></li></ol><h3 id="布局树LayoutTree"><a href="#布局树LayoutTree" class="headerlink" title="布局树LayoutTree"></a>布局树LayoutTree</h3><ul><li>创建布局树</li></ul><ol><li>遍历DOM树中的所有可见节点，并把这些节点加到布局中；</li><li>而不可见的节点会被布局树忽略掉，如head标签下面的全部内容，再比如属性包含 dispaly:none的元素，所以这个元素也没有被包进布局树</li></ol><ul><li>布局计算<br>计算布局树节点的坐标位置</li></ul><h3 id="分层树LayerTree"><a href="#分层树LayerTree" class="headerlink" title="分层树LayerTree"></a>分层树LayerTree</h3><p>满足以下任意条件，渲染引擎就会为特定的节点创建新的层。</p><ol><li>拥有层叠上下文属性的元素会被提升为单独的一层<br>如：明确定位属性的元素、定义透明属性的元素、使用CSS滤镜的元素<br><img src="https://statics.oulafen.com/browser-render-layer-00.png" alt="image"></li><li>需要剪裁（clip）的地方也会被创建为图层<br>如：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">div &#123;</span><br><span class="line">    width: 200;</span><br><span class="line">    height: 200;</span><br><span class="line"><span class="css">    <span class="selector-tag">overflow</span><span class="selector-pseudo">:auto</span>;</span></span><br><span class="line">    background: gray;</span><br><span class="line">&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>出现这种裁剪情况的时候，渲染引擎会为文字部分单独创建一个层，如果出现滚动条，滚动条也会被提升为单独的层。<br><img src="https://statics.oulafen.com/browser-render-layer-01.png" alt="image"></p><h3 id="栅格化"><a href="#栅格化" class="headerlink" title="栅格化"></a>栅格化</h3><p>在有些情况下，有的图层可以很大，比如有的页面你使用滚动条要滚动好久才能滚动到底部，但是通过视口，用户只能看到页面的很小一部分，所以在这种情况下，要绘制出所有图层内容的话，就会产生太大的开销，而且也没有必要。</p><p>基于这个原因，合成线程会将图层划分为图块（tile），这些图块的大小通常是256x256或者512x512，如下图所示：<br><img src="https://statics.oulafen.com/browser-render-raster-01.png" alt="image"></p><p>所谓栅格化，是指将图块转换为位图。而图块是栅格化执行的最小单位。渲染进程维护了一个栅格化的线程池，所有的图块栅格化都是在线程池内执行的。</p><p>通常，栅格化过程都会使用GPU来加速生成，使用GPU生成位图的过程叫快速栅格化/GPU栅格化，生成的位图被保存在GPU内存中<br><img src="https://statics.oulafen.com/browser-render-raster-01.png" alt="image"></p><h3 id="合成与显示"><a href="#合成与显示" class="headerlink" title="合成与显示"></a>合成与显示</h3><p>一旦所有图块都被光栅化，合成线程就会生成一个绘制图块的命令——“DrawQuad”，然后将该命令提交给浏览器进程。</p><p>浏览器进程里面有一个叫viz的组件，用来接收合成线程发过来的DrawQuad命令，然后根据DrawQuad命令，将其页面内容绘制到内存中，最后再将内存显示在屏幕上。</p>]]></content>
    
    
    <summary type="html">browser-浏览器原理</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="browser" scheme="https://blog.oulafen.com/tags/browser/"/>
    
  </entry>
  
  <entry>
    <title>从输入URL到页面展示，这中间发生了什么</title>
    <link href="https://blog.oulafen.com/2020/07/25/browser-url/"/>
    <id>https://blog.oulafen.com/2020/07/25/browser-url/</id>
    <published>2020-07-25T04:02:34.000Z</published>
    <updated>2021-10-22T17:05:41.886Z</updated>
    
    <content type="html"><![CDATA[<p>URL请求过程：DNS解析、TCP连接、重定向、准备渲染进程、提交文档、渲染。</p><p>默认策略process-per-site-instance<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><img src="https://statics.oulafen.com/brower-url-001.png" alt="image"></p><ul><li>用户输入url并回车</li><li>浏览器进程检查url，组装协议，构成完整的url</li><li>浏览器进程通过进程间通信（IPC）把url请求发送给网络进程</li><li>网络进程接收到url请求后检查本地缓存是否缓存了该请求资源，如果有则将该资源返回给浏览器进程</li><li><p>如果没有，网络进程向web服务器发起http请求（网络请求），请求流程如下：</p><p>  进行DNS解析，获取服务器ip地址，如果请求协议是HTTPS，那么还需要建立TLS连接。<br>  利用ip地址和服务器（三次握手）建立TCP连接，<br>  服务器响应后，网络进程接收响应头和响应信息，并解析响应内容。<br>  一次完整的TCP生命周期包含：建立连接、传输数据、断开连接<br>  <img src="https://statics.oulafen.com/brower-url-003.png" alt="image"></p></li><li><p>网络进程解析响应流程；</p><p>  检查状态码，如果是301/302，则需要重定向，从Location自动中读取地址，重新进行第4步 （301/302跳转也会读取本地缓存吗？这里有个疑问），如果是200，则继续处理请求。</p><p>  200响应处理：检查响应类型Content-Type，如果是字节流类型，则将该请求提交给下载管理器，该导航流程结束，不再进行后续的渲染，如果是html则通知浏览器进程准备渲染进程准备进行渲染。</p></li><li><p>准备渲染进程</p><p>  使用默认策略：<code>process-per-site-instance</code>。即默认每个标签对应一个渲染进程。但如果从一个页面打开了另一个新页面，而新页面和当前页面属于同一站点的话，那么新页面会复用父页面的渲染进程。</p><p>  浏览器进程检查当前url是否和之前打开的渲染进程根域名是否相同，如果相同，则复用原来的进程，如果不同，则开启新的渲染进程</p></li><li><p>传输数据、更新状态、渲染DOM</p><p>  渲染进程准备好后，浏览器向渲染进程发起“提交文档”的消息，渲染进程接收到消息和网络进程建立传输数据的“管道”<br>  渲染进程接收完数据后，向浏览器发送“确认提交”<br>  浏览器进程接收到确认消息后更新浏览器界面状态：安全、地址栏url、前进后退的历史状态、更新web页面<br>  <img src="https://statics.oulafen.com/brower-url-002.png" alt="image"></p></li></ul><p>一个数据包的旅程</p><ul><li>IP：把数据包送达目的主机</li><li>UDP：把数据包送达应用程序</li><li>TCP：把数据完整地送达应用程序。它的连接可分为三个阶段：建立连接、传输数据和断开连接</li></ul>]]></content>
    
    
    <summary type="html">browser-浏览器原理</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="browser" scheme="https://blog.oulafen.com/tags/browser/"/>
    
  </entry>
  
  <entry>
    <title>chrome浏览器的架构演进</title>
    <link href="https://blog.oulafen.com/2020/07/23/browser-history/"/>
    <id>https://blog.oulafen.com/2020/07/23/browser-history/</id>
    <published>2020-07-23T04:02:34.000Z</published>
    <updated>2021-10-22T16:59:07.169Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录chrome浏览器的架构演进。<br><a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="单进程浏览器时代（2007年之前）"><a href="#单进程浏览器时代（2007年之前）" class="headerlink" title="单进程浏览器时代（2007年之前）"></a>单进程浏览器时代（2007年之前）</h2><p>浏览器的所有功能模块都在一个进程里<br><img src="https://statics.oulafen.com/blog/images/brower-001.png" alt="image"><br>存在问题<br>    不稳定<br>    不流畅<br>    不安全</p><h2 id="早期多进程架构（2008年发布）"><a href="#早期多进程架构（2008年发布）" class="headerlink" title="早期多进程架构（2008年发布）"></a>早期多进程架构（2008年发布）</h2><p><img src="https://statics.oulafen.com/blog/images/brower-002.png" alt="image"><br>从图中可以看出，Chrome的页面是运行在单独的渲染进程中的，同时页面里的插件也是运行在单独的插件进程之中，而进程之间是通过IPC机制进行通信（如图中虚线部分）。</p><p><code>我们先看看如何解决不稳定的问题</code>。由于进程是相互隔离的，所以当一个页面或者插件崩溃时，影响到的仅仅是当前的页面进程或者插件进程，并不会影响到浏览器和其他页面，这就完美地解决了页面或者插件的崩溃会导致整个浏览器崩溃，也就是不稳定的问题。</p><p><code>接下来再来看看不流畅的问题是如何解决的</code>。同样，JavaScript也是运行在渲染进程中的，所以即使JavaScript阻塞了渲染进程，影响到的也只是当前的渲染页面，而并不会影响浏览器和其他页面，因为其他页面的脚本是运行在它们自己的渲染进程中的。所以当我们再在Chrome中运行上面那个死循环的脚本时，没有响应的仅仅是当前的页面。</p><p>对于内存泄漏的解决方法那就更简单了，因为当关闭一个页面时，整个渲染进程也会被关闭，之后该进程所占用的内存都会被系统回收，这样就轻松解决了浏览器页面的内存泄漏问题。</p><p><code>最后我们再来看看上面的两个安全问题是怎么解决的</code>。采用多进程架构的额外好处是可以使用安全沙箱，你可以把沙箱看成是操作系统给进程上了一把锁，沙箱里面的程序可以运行，但是不能在你的硬盘上写入任何数据，也不能在敏感位置读取任何数据，例如你的文档和桌面。Chrome把插件进程和渲染进程锁在沙箱里面，这样即使在渲染进程或者插件进程里面执行了恶意程序，恶意程序也无法突破沙箱去获取系统权限。</p><h2 id="目前多进程架构"><a href="#目前多进程架构" class="headerlink" title="目前多进程架构"></a>目前多进程架构</h2><p><img src="https://statics.oulafen.com/blog/images/brower-003.png" alt="image"><br>从图中可以看出，最新的Chrome浏览器包括：1个浏览器（Browser）主进程、1个 GPU 进程、1个网络（NetWork）进程、多个渲染进程和多个插件进程</p><p>下面我们来逐个分析下这几个进程的功能。</p><ul><li>浏览器进程。主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。</li><li>渲染进程。核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎Blink和JavaScript引擎V8都是运行在该进程中，默认情况下，Chrome会为每个Tab标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。</li><li>GPU进程。其实，Chrome刚开始发布的时候是没有GPU进程的。而GPU的使用初衷是为了实现3D CSS的效果，只是随后网页、Chrome的UI界面都选择采用GPU来绘制，这使得GPU成为浏览器普遍的需求。最后，Chrome在其多进程架构上也引入了GPU进程。</li><li>网络进程。主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。</li><li>插件进程。主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响</li></ul><p>不过凡事都有两面性，虽然多进程模型提升了浏览器的稳定性、流畅性和安全性，但同样不可避免地带来了一些问题</p><ul><li>更高的资源占用。因为每个进程都会包含公共基础结构的副本（如JavaScript运行环境），这就意味着浏览器会消耗更多的内存资源。</li><li>更复杂的体系架构。浏览器各模块之间耦合性高、扩展性差等问题，会导致现在的架构已经很难适应新的需求了</li></ul><h2 id="未来面向服务的架构"><a href="#未来面向服务的架构" class="headerlink" title="未来面向服务的架构"></a>未来面向服务的架构</h2><p>为了解决这些问题，在2016年，Chrome官方团队使用“面向服务的架构”（Services Oriented Architecture，简称SOA）的思想设计了新的Chrome架构。也就是说 Chrome 整体架构会朝向现代操作系统所采用的“面向服务的架构” 方向发展，原来的各种模块会被重构成独立的服务（Service），每个服务（Service）都可以在独立的进程中运行，访问服务（Service）必须使用定义好的接口，通过IPC来通信，从而构建一个更内聚、松耦合、易于维护和扩展的系统，更好实现 Chrome 简单、稳定、高速、安全的目标。如果你对面向服务的架构感兴趣，你可以去网上搜索下资料，这里就不过多介绍了。</p><p>Chrome最终要把UI、数据库、文件、设备、网络等模块重构为基础服务，类似操作系统底层服务，下面是Chrome“面向服务的架构”的进程模型图<br><img src="https://statics.oulafen.com/blog/images/brower-004.png" alt="image"></p><p>目前Chrome正处在老的架构向服务化架构过渡阶段，这将是一个漫长的迭代过程。</p><p>Chrome正在逐步构建Chrome基础服务（Chrome Foundation Service），如果你认为Chrome是“便携式操作系统”，那么Chrome基础服务便可以被视为该操作系统的“基础”系统服务层。</p><p>同时Chrome还提供灵活的弹性架构，在强大性能设备上会以多进程的方式运行基础服务，但是如果在资源受限的设备上（如下图），Chrome会将很多服务整合到一个进程中，从而节省内存占用。<br><img src="https://statics.oulafen.com/blog/images/brower-005.png" alt="image"></p>]]></content>
    
    
    <summary type="html">browser-浏览器原理</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="browser" scheme="https://blog.oulafen.com/tags/browser/"/>
    
  </entry>
  
  <entry>
    <title>Github Pages博客域名如何设置HTTPS</title>
    <link href="https://blog.oulafen.com/2018/07/16/github-pages-link-https/"/>
    <id>https://blog.oulafen.com/2018/07/16/github-pages-link-https/</id>
    <published>2018-07-16T07:00:00.000Z</published>
    <updated>2021-10-22T17:09:01.243Z</updated>
    
    <content type="html"><![CDATA[<p>最近更新博客，发现被糊了一堆广告，实在是不忍直视，就找了下如何给本站加上HTTPS的方案。<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>背景介绍</p><p>本站是基于Github Pages服务搭建的静态博客，官网<a href="https://pages.github.com/" target="_blank" rel="noopener">戳这里</a><br>如果是直接使用 username.github.io 这样的域名的话，是默认就支持了 HTTPS 的, 直接访问 <code>https://username.github.io</code> 即可，自定义域名就需要自己折腾一下了。</p><p>在寻找解决方案的过程中，认识了<a href="https://app.netlify.com/" target="_blank" rel="noopener">Netlify</a></p><pre><code>什么是Netlify?1、Netlify是一个现代网站自动化系统，其JAM架构代表了现代网站的发展趋势。所谓JAM，就是指基于客户端JavaScript、可重用API和预构建Markup标记语言的三者结合。2、有了Netlify，我们只要在本机Git中写前端代码，然后推送它，网站就能完美地对外呈现，并且附送大量好功能：全球CDN、持续部署、一键HTTPS和更多…</code></pre><p>简直要飞起的节奏。<br>下面介绍如何在Netlify上配置github pages博客的自定义域名。</p><ul><li>使用github注册<a href="https://app.netlify.com/" target="_blank" rel="noopener">Netlify</a>账号</li><li>新建站点<br>  <img alt="新建站点0" style="width:100%" src="http://statics.oulafen.com/blog-https-netlify-step-0.jpg"><br>  选择代码托管平台<br>  <img alt="选中代码托管平台" style="width:100%" src="http://statics.oulafen.com/blog-https-netlify-step-1.jpg"><br>  选择代码仓库<br>  <img alt="选择代码仓库" style="width:100%" src="http://statics.oulafen.com/blog-https-netlify-step-2.jpg"><br>  选择代码分支及构建命令<br>  <img alt="选择代码分支及构建命令" style="width:100%" src="http://statics.oulafen.com/blog-https-netlify-step-3.jpg"></li><li><p>更改站点默认名称<br>  <img alt="更改站点默认名称0" style="width:100%" src="http://statics.oulafen.com/blog-https-netlify-step-4.jpg"><br>  <img alt="更改站点默认名称1" style="width:100%" src="http://statics.oulafen.com/blog-https-netlify-step-5.jpg"><br>  <img alt="更改站点默认名称2" style="width:100%" src="http://statics.oulafen.com/blog-https-netlify-step-6.jpg"></p><p>  保存成功后，到此可以通过<code>https://username.netlify.com</code>来访问，如 <a href="https://oulafen.netlify.com" target="_blank" rel="noopener">https://oulafen.netlify.com</a><br>  想使用自己的域名的话，还需以下步骤</p></li><li><p>绑定域名<br>  <img alt="绑定域名0" style="width:100%" src="http://statics.oulafen.com/blog-https-netlify-step-7.jpg"><br>  <img alt="绑定域名1" style="width:100%" src="http://statics.oulafen.com/blog-https-netlify-step-8.jpg"></p></li><li><p>添加域名解析<br>  <img alt="添加域名解析" style="width:100%" src="http://statics.oulafen.com/blog_https_netlify.jpg"></p></li></ul><p>至此，大功告成</p><p>访问<a href="https://blog.oulafen.com">https://blog.oulafen.com</a>是不是溜得飞起，哈哈，再也不怕被莫名劫持贴广告了。</p><h2 id="补坑思考中的升华"><a href="#补坑思考中的升华" class="headerlink" title="补坑思考中的升华"></a>补坑思考中的升华</h2><p>除了使用netlify的方式外，还有没有其他的了呢？</p><p>先说下使用netlify这类方式遇到的问题</p><pre><code>github page的子项目链接，默认是`主项目域名/项目名称`进行访问，比如，我的一个项目`h5_my_home`，想通过外链直接看效果的话，之前直接通过http://blog.oulafen.com/h5_my_home来访问。现在改成https后，域名解析里找不到与username.github.io的对应关系，所以就不能通过原来的方式直接访问项目了。</code></pre><p>细细查看了项目的设置后，发现个更简单的方式<br>可以直接单独设置项目的domain<br>    <img alt="设置domain" style="width:100%" src="http://statics.oulafen.com/blog-https-domain-0.jpg"></p><p>在域名解析里再加一条解析，就又大功告成了，^_^<br>    <img alt="添加域名解析1" style="width:100%" src="http://statics.oulafen.com/blog-https-domain-1.jpg"></p><p>无独有偶，还看到了 Enforce HTTPS 的设置项，选中后，访问https的链接也是完美很。（需要添加域名24小时后才能选中）</p><p>还有个小问题的解决方案，这里提一下</p><pre><code>当有n多项目都需要展示时，按以上的方案，也得添加n条域名解析?这个肯定不是这样的，想想正则，立马有了眉目，直接在解析里加一条带*的即可，如</code></pre><p><img alt="添加域名解析2" style="width:100%" src="http://statics.oulafen.com/blog-https-domain-2.jpg"></p><p>N多项目只需在github上设置下自定义域名即可<br><a href="https://10kpreheatingh5.coder.oulafen.com/" target="_blank" rel="noopener">https://10kpreheatingh5.coder.oulafen.com/</a><br><a href="https://drawmapcolorfully.coder.oulafen.com/" target="_blank" rel="noopener">https://drawmapcolorfully.coder.oulafen.com/</a><br><a href="https://rmbplus20.coder.oulafen.com/" target="_blank" rel="noopener">https://rmbplus20.coder.oulafen.com/</a><br><a href="https://lemoncitymedal.coder.oulafen.com/" target="_blank" rel="noopener">https://lemoncitymedal.coder.oulafen.com/</a><br><a href="https://scratchcardberlin.coder.oulafen.com/" target="_blank" rel="noopener">https://scratchcardberlin.coder.oulafen.com/</a><br>…</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>给github pages博客域名设置https，目前最简单直接的是，直接在项目<strong>setting</strong>里设置<code>custom domain</code>，并且24小时后选中<code>Enforce HTTPS</code>即可</p><p>虽然解决过程中饶了一圈，不过有幸认识了Netlify，并对多个子项目的域名设置有了更多的思考，也算是涨了点知识。</p><p>参考：<br>    <a href="https://jaeger.itscoder.com/web/2017/08/30/github-page-https.html" target="_blank" rel="noopener">https://jaeger.itscoder.com/web/2017/08/30/github-page-https.html</a><br>    <a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/" target="_blank" rel="noopener">https://help.github.com/articles/using-a-custom-domain-with-github-pages/</a></p>]]></content>
    
    
    <summary type="html">Github Pages博客域名如何设置HTTPS</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="git" scheme="https://blog.oulafen.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>解决公众号SPA的微信缓存问题</title>
    <link href="https://blog.oulafen.com/2018/07/14/spa_wechat_cache/"/>
    <id>https://blog.oulafen.com/2018/07/14/spa_wechat_cache/</id>
    <published>2018-07-13T16:23:28.000Z</published>
    <updated>2021-10-22T17:10:32.684Z</updated>
    
    <content type="html"><![CDATA[<p>进行公众号开发的同学肯定遇到过这样的问题，新上线的功能，重新请求时，页面没有更新。<br>本人使用VUE开发的单页面应用，就是如此，问题虽小却棘手。<br>如何解决微信缓存问题，又不用手动更改版本号，实现自动化生成发布文件呢？</p><a id="more"></a><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>项目背景：</p><pre><code>基于vue-cli生成的webpack-sample项目项目目录（已去除跟本次问题无关的）<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">project_name</span><br><span class="line">├── <span class="keyword">dist </span>           <span class="comment">#编译好的资源目录</span></span><br><span class="line">│   ├── main.<span class="keyword">bundle.js</span></span><br><span class="line"><span class="keyword">│ </span>  ├── common.<span class="keyword">bundle.js</span></span><br><span class="line"><span class="keyword">│ </span>  ├── <span class="keyword">chunks </span>     <span class="comment">#模块化的js文件</span></span><br><span class="line">│   │      │── <span class="number">1</span>-xx.<span class="keyword">js</span></span><br><span class="line"><span class="keyword">│ </span>  │      ...</span><br><span class="line">├── index.html      <span class="comment">#项目入口文件</span></span><br><span class="line">├── webpack.config.<span class="keyword">js </span>  <span class="comment">#webpack配置</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></code></pre><p>在使用webpack打包代码时，会有个入口文件，以及一些模块化的chunks文件；<br>新更新的功能，build代码，更新服务器后，需手动修改入口文件的版本号</p><p>index.html<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--...--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/dist/common.build.js?v=1.3.35"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/dist/main.build.js?v=1.3.35"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>按预期<code>?v=xxx</code>更改后，浏览器会重新请求最新文件，But在微信浏览器中，并非全部如此。<br>经不完全测试，iphone系列以及部分安卓机可以按预期没有问题，但还有为数不少的安卓手机（比如三星、小米）上必须手动在微信网页右上角入口里刷新页面才行，这对用户来说肯定是不好的体验，不明所以的就会觉得程序有bug。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>既然更改静态资源版本号不好使，那暴力点儿，直接更改文件名呢？<br>（之前受制于vue-li集成的webpack-sample项目，入口文件在项目跟目录下，无法自动更改，故每次发版后手动更改index.html里的文件版本号，有一点刀耕火种。）</p><p>如此，便解决以下几个问题就万事大吉了</p><pre><code>1.如何生成新名字的js文件2.新的js文件如何被自动引入到项目入口文件里3.如何不影响本地集成的开发环境</code></pre><ul><li><p>针对第一点，在webpack的配置里修改export的filename即可</p><p>  修改webpack配置，在原来的名字后面加了时间戳，每次build时都会发生变化</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line">output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    filename: <span class="string">`[name]-<span class="subst">$&#123;<span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>())&#125;</span>.build.js`</span>, <span class="comment">//在原来的名字后面加了时间戳，每次build时都会发生变化</span></span><br><span class="line">    chunkFilename: <span class="string">'chunts/[name]-[chunkhash:8].js'</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure></li><li><p>针对第二点，可以通过<code>html-webpack-plugin</code>这个官方插件解决<br>  修改webpack配置</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HTMLWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">          filename: <span class="string">'index.html'</span>,            <span class="comment">//自动在dist目录下生成入口文件的名称（不能直接生成到项目根目录下）</span></span><br><span class="line">          template: <span class="string">'./index_template.html'</span>, <span class="comment">//以根目录下的`index_template.html`文件为模板</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>针对第三点，下面稍微解释下为什么会有这个问题</p><p>  本地<code>npm run dev</code>开发时，<code>webpack-dev-server</code>默认是以项目根目录下的<code>index.html</code>为项目入口文件，除了手动更改外，请求的静态文件是不变的；<br>  而之前的两点中重中之重是<strong>变化的文件名称</strong>，这样就找不到入口js文件了。</p><p>  So，解决方案来了，同一个设置，两个环境不能兼容，那就分开设置吧^_^</p><p>  webpack.config.js</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">    <span class="keyword">module</span>.<span class="keyword">exports</span>.output.publicPath = <span class="string">'/dist/'</span>;</span><br><span class="line">    <span class="keyword">module</span>.<span class="keyword">exports</span>.output.filename = <span class="string">'[name].build.js'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">    <span class="keyword">module</span>.<span class="keyword">exports</span>.output.filename = `[name]-$&#123;Date.parse(<span class="keyword">new</span> Date())&#125;.build.js`;</span><br><span class="line">    <span class="keyword">module</span>.<span class="keyword">exports</span>.plugins = (<span class="keyword">module</span>.<span class="keyword">exports</span>.plugins || []).concat([</span><br><span class="line">        <span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">          filename: <span class="string">'index.html'</span>,</span><br><span class="line">          template: <span class="string">'./index_template.html'</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  到此，问题全部解决，结果很赞、很完美。</p><p>  需要注意</p><pre><code>1.`html-webpack-plugin`自动生成的入口文件只能是在设置的公共资源目录下2.打包后的代码的入口文件由原来的 `project_name/index.html` 变成了 `project_name/dist/index.html`,  一定要记得更改服务器nginx的项目目录配置</code></pre></li></ul><p>修改之后的项目目录<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">project_name</span><br><span class="line">├── <span class="keyword">dist </span>               <span class="comment">#编译好的资源目录</span></span><br><span class="line">│   ├── index.html      <span class="comment">#线上打包入口文件</span></span><br><span class="line">│   ├── main<span class="number">-1531500891000</span>.<span class="keyword">bundle.js</span></span><br><span class="line"><span class="keyword">│ </span>  ├── common<span class="number">-1531500891000</span>.<span class="keyword">bundle.js</span></span><br><span class="line"><span class="keyword">│ </span>  ├── <span class="keyword">chunks </span>     <span class="comment">#模块化的js文件</span></span><br><span class="line">│   │      │── <span class="number">1</span>-xx.<span class="keyword">js</span></span><br><span class="line"><span class="keyword">│ </span>  │      ...</span><br><span class="line">├── index.html              <span class="comment">#本地开发入口文件</span></span><br><span class="line">├── index_template.html     <span class="comment">#项目入口模板</span></span><br><span class="line">├── webpack.config.<span class="keyword">js </span>      <span class="comment">#webpack配置</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>解决微信SPA强缓存的问题，可以通过修改入口文件的js文件名称来彻底解决。除此之外，就是考虑工程化的问题，如何以更少的人工代价来实现了。</p><p>此方案也有个弊端，就是每次更新版本后，用户请求网页时需要重新加载入口js文件，会耗些流量。鉴于此，可以尽量避免小功能多次更新，版本周期过短。</p><ul><li>话外音</li></ul><p>微信为什么会有这么强的缓存机制，或许有机会研读了微信内置qq浏览器后才会有答案。<br>感谢我们能够站在牛人的肩膀上，不用从头来实现底层的东西，只要简单几行来配置就可以了。</p><p>此次解决完问题后，有种蜕变的感觉，出现问题后，看待问题的角度也有些变化，很有成就感。<br>之前疲于业务逻辑，没有时间好好的沉淀下来，以后要多些时间来自我总结。</p><p>参考: <a href="https://webpack.js.org/plugins/html-webpack-plugin/" target="_blank" rel="noopener">https://webpack.js.org/plugins/html-webpack-plugin/</a></p>]]></content>
    
    
    <summary type="html">解决公众号SPA的微信缓存问题</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="笔记" scheme="https://blog.oulafen.com/tags/笔记/"/>
    
  </entry>
  
  <entry>
    <title>oh-my-zsh[mac终端高逼格的选择]</title>
    <link href="https://blog.oulafen.com/2018/06/22/mac-oh-my-zsh/"/>
    <id>https://blog.oulafen.com/2018/06/22/mac-oh-my-zsh/</id>
    <published>2018-06-22T13:00:29.000Z</published>
    <updated>2021-10-22T17:10:32.684Z</updated>
    
    <content type="html"><![CDATA[<p>Mac OSX默认使用bash shell，在耍命令的时候，文件的显示没有带颜色，也没有自动补全。<br>而使用zsh shell+Oh My Zsh主题，就能让我们的终端瞬间高大上<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>Oh My Zsh 的官网地址：<a href="http://ohmyz.sh/" target="_blank" rel="noopener">http://ohmyz.sh/</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>via curl<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure></p><p>via wget<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure></p><p>切换到zsh<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s <span class="regexp">/bin/</span>zsh</span><br></pre></td></tr></table></figure></p><p>若按照官网的安装方法总是提示连接超时,可以在终端中使用如下命令来安装<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L http<span class="variable">s:</span>//raw.github.<span class="keyword">com</span>/robbyrussell/oh-my-zsh/master/tools/install.<span class="keyword">sh</span> | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li><p>打开配置文件</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~<span class="string">/.zshrc</span></span><br></pre></td></tr></table></figure></li><li><p>搜索ZSH_THEME找到主题配置<br>  <img src="http://statics.oulafen.com/blog/ohmyzsh-0.jpg" style="width: 100%;"></p></li><li><p>可打开Oh My Zsh主题展示网站<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</a>，选择喜欢的注意进行更改。这里使用的是vim来打开的配置文件，所以需要按字母i进行插入，然后把光标移动到ZSH_THEME这行，更改主题键值对,例如: <code>ZSH_THEME=&quot;agnoster&quot;</code>，按ESC键后，键入<code>:wq</code>保存并退出</p></li><li><p>关闭终端，重新打开，输入几个常用的命令，即可查看效果</p></li><li><p>设置其他，可打开终端-&gt;Preferences里进行各种设置<br>  <img src="http://statics.oulafen.com/blog/ohmyzsh-1.jpg" style="width: 100%;"></p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>今天指导新同事，跟他提mac上好用的东西，<code>oh my zsh</code>怎么少的了，也在自己的地盘做个笔记吧，免得张口半天忘了叫什么名字[尴尬]</p><p>阅读参考:</p><ul><li><a href="https://ohmyz.sh/" target="_blank" rel="noopener">https://ohmyz.sh/</a></li><li><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh</a></li><li><a href="http://yijiebuyi.com/blog/b9b5e1ebb719f22475c38c4819ab8151.html" target="_blank" rel="noopener">http://yijiebuyi.com/blog/b9b5e1ebb719f22475c38c4819ab8151.html</a></li></ul>]]></content>
    
    
    <summary type="html">oh-my-zsh</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="mac" scheme="https://blog.oulafen.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>用ES6写jquery语法时的this绑定问题</title>
    <link href="https://blog.oulafen.com/2017/11/22/es6-jq-this/"/>
    <id>https://blog.oulafen.com/2017/11/22/es6-jq-this/</id>
    <published>2017-11-22T12:58:29.000Z</published>
    <updated>2021-10-22T17:07:01.104Z</updated>
    
    <content type="html"><![CDATA[<p>在es6里使用jquery时，习惯用es5中直接获取dom元素，如<code>$(&#39;selector&#39;)</code>, 绑定<code>click</code>或<code>hover</code>等事件; 若你也追求潮流，在选择器事件中使用箭头函数来定义，并用到<code>$(this)</code>的话， 那一定像我一样遇到了小小的困扰吧。<br><a id="more"></a></p><h2 id="问题重现"><a href="#问题重现" class="headerlink" title="问题重现"></a>问题重现</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'[data-action="imgQRCodeCtrl"]'</span>).hover(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            !Base.browser.mobile &amp;&amp; $(<span class="keyword">this</span>).find(<span class="string">'.qr-code'</span>).css(&#123;</span><br><span class="line">                <span class="string">'height'</span>: ( $(<span class="keyword">this</span>).find(<span class="string">'.img'</span>).height() + <span class="number">2</span> ) + <span class="string">'px'</span>,</span><br><span class="line">                <span class="string">'opacity'</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">'z-index'</span>: <span class="number">1</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            $(<span class="keyword">this</span>).find(<span class="string">'.qr-code'</span>).css(&#123;<span class="string">'opacity'</span>: <span class="number">0</span>, <span class="string">'z-index'</span>: <span class="number">-1</span>&#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">        .click(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(Base.browser.mobile)&#123;</span><br><span class="line">                location.href = $(<span class="keyword">this</span>).data(<span class="string">'href'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>乍一看，这段代码没什么问题，逻辑也很简单，就是在所有属性有<code>data-action=&quot;imgQRCodeCtrl&quot;</code>的列表元素上绑定<code>hover</code>及<code>click</code>事件，实现pc端hover时能够使内部的一个块显示或隐藏，移动端点击时获取当前属性上的href并进行跳转；</p><p>当然so easy，在过去的es5上按这种逻辑写完全么有问题；but ES6里解析后，会重新定义this，</p><p>如下是真实浏览器上加载的解析后的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = __webpack_require__(<span class="string">"./node_modules/jquery/dist/jquery.js"</span>);</span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">    $(<span class="string">'[data-action="imgQRCodeCtrl"]'</span>).hover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        !_base2.default.browser.mobile &amp;&amp; $(_this).find(<span class="string">'.qr-code'</span>).css(&#123;</span><br><span class="line">            <span class="string">'height'</span>: $(_this).find(<span class="string">'.img'</span>).height() + <span class="number">2</span> + <span class="string">'px'</span>,</span><br><span class="line">            <span class="string">'opacity'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'z-index'</span>: <span class="number">1</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(_this).find(<span class="string">'.qr-code'</span>).css(&#123; <span class="string">'opacity'</span>: <span class="number">0</span>, <span class="string">'z-index'</span>: <span class="number">-1</span> &#125;);</span><br><span class="line">    &#125;).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_base2.default.browser.mobile)&#123;</span><br><span class="line">            location.href = $(_this).data(<span class="string">'href'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>看<code>this</code>发生了什么！</p><p>即便没有真实运行这段代码，有点基础的，肯定能预见到页面上发生了什么。。。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><blockquote><p>This has nothing to do with Traceur and turning something off, this is simply how ES6 works. It’s the specific functionality you’re asking for by using =&gt; instead of function () { }.</p></blockquote><blockquote><p>If you want to write ES6, you need to write ES6 all the time, you can’t switch in and out of it on certain lines of code, and you definitely cannot suppress or alter the way =&gt; works. Even if you could, you would just wind up with some bizarre version of JavaScript that only you understand and which would never work correctly outside of your customized Traceur, which definitely isn’t the point of Traceur.</p></blockquote><p>我理解的大意是说 “ES6的工作方式就是这样，跟编译无关，与写法有关；若想用ES6，最好全用ES6的写法，不能改变它原本的定义…”（英文不好，欢迎大神指正 &gt;_&lt; ）</p><p>看到这儿，吓得我赶紧查了查文档</p><p>原来箭头函数，不绑定自己的this，这一下就说通了；好好看看下面这句吧，不遇到问题时永远记忆模糊，哈哈</p><blockquote><p>箭头函数表达式的语法比函数表达式更短，并且不绑定自己的this，arguments，super或 new.target。这些函数表达式最适合用于非方法函数，并且它们不能用作构造函数。</p></blockquote><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><ul><li>方法一：弄清除原理后，就很简单了，绑定<code>this</code>的函数不使用箭头函数不就行了，如下试验果然ok：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'[data-action="imgQRCodeCtrl"]'</span>)</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        .click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (Base.browser.mobile) &#123;</span><br><span class="line">                location.href = $(<span class="keyword">this</span>).data(<span class="string">'href'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ul><li>方法二：不使用<code>this</code>, 使用<code>event.currentTarget</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'[data-action="imgQRCodeCtrl"]'</span>)</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        .click(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Base.browser.mobile) &#123;</span><br><span class="line">                location.href = $(event.currentTarget).data(<span class="string">'href'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ul><li>方法三：利用each函数循环绑定到每一个小元素上，如此就不需要<code>this</code>了</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'[data-action="imgQRCodeCtrl"]'</span>).each(<span class="function">(<span class="params">index, element</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> _this = element;</span><br><span class="line">        $(_this).click(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (Base.browser.mobile) &#123;</span><br><span class="line">                    location.href = $(_this).data(<span class="string">'href'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上的解决方法都能得到想要的效果，不过还是提议使用 <em>方法一</em> 来解决，更简单直白，在维护和团队合作上会起很大作用，因为没人愿意读别人写的拐了十八个弯弯的代码</p><p>这个问题挺小的，可能某些大牛看到后会鄙视我，不过喜欢这种遇到问题自己一步步解决并完美解释清楚的感觉，还在路上，有问题欢迎交流指正，以后还会多多以这种方式总结下。。。</p><p>参考链接<br><a href="https://stackoverflow.com/questions/27670401/using-jquery-this-with-es6-arrow-functions-lexical-this-binding" target="_blank" rel="noopener">https://stackoverflow.com/questions/27670401/using-jquery-this-with-es6-arrow-functions-lexical-this-binding</a></p>]]></content>
    
    
    <summary type="html">用ES6写jquery语法时的事件this绑定问题</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="ES6" scheme="https://blog.oulafen.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>mysql相关命令操作</title>
    <link href="https://blog.oulafen.com/2017/04/01/mysql-command/"/>
    <id>https://blog.oulafen.com/2017/04/01/mysql-command/</id>
    <published>2017-04-01T13:00:29.000Z</published>
    <updated>2020-05-14T03:03:56.387Z</updated>
    
    <content type="html"><![CDATA[<p>记录总结<br><a id="more"></a></p><h2 id="数据库命令操作"><a href="#数据库命令操作" class="headerlink" title="数据库命令操作"></a>数据库命令操作</h2><h3 id="linux局域网内数据库拷贝："><a href="#linux局域网内数据库拷贝：" class="headerlink" title="linux局域网内数据库拷贝："></a>linux局域网内数据库拷贝：</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式</span></span><br><span class="line">scp local_file remote_username<span class="meta">@remote</span><span class="string">_ip:</span>remote_folder</span><br><span class="line"><span class="comment">//如：</span></span><br><span class="line">scp lemon_feedback.sql work@<span class="number">10.172</span><span class="number">.229</span><span class="number">.96</span>:sql</span><br></pre></td></tr></table></figure><h3 id="将数据库文件导入数据库中："><a href="#将数据库文件导入数据库中：" class="headerlink" title="将数据库文件导入数据库中："></a>将数据库文件导入数据库中：</h3><ul><li><p>建空数据库</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;<span class="keyword">create</span> <span class="keyword">database</span> abc;</span><br></pre></td></tr></table></figure></li><li><p>导入数据库</p></li></ul><p>方法一：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择数据库</span></span><br><span class="line">mysql&gt;use abc;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置数据库编码</span></span><br><span class="line">mysql&gt;<span class="keyword">set</span> names <span class="comment">utf8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入数据（注意sql文件的路径）</span></span><br><span class="line">mysql&gt;source /home/abc/abc.sql;</span><br></pre></td></tr></table></figure></p><p>方法二：<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -u用户名 -p密码 数据库名 &lt; 数据库名<span class="string">.sql</span></span><br><span class="line"></span><br><span class="line"><span class="string">//</span>例如：</span><br><span class="line">mysql -ulemon -p2016Lemon lemon_feedback &lt; lemon_feedback.sql</span><br></pre></td></tr></table></figure></p><h3 id="常用mysql命令"><a href="#常用mysql命令" class="headerlink" title="常用mysql命令"></a>常用mysql命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;show databases; //查看所有的数据库</span><br><span class="line">mysql&gt;use database_name; //选择数据库</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">sql command</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="sql" scheme="https://blog.oulafen.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>js字符操作</title>
    <link href="https://blog.oulafen.com/2017/01/20/js-func-1/"/>
    <id>https://blog.oulafen.com/2017/01/20/js-func-1/</id>
    <published>2017-01-20T13:00:28.000Z</published>
    <updated>2021-10-22T17:09:47.963Z</updated>
    
    <content type="html"><![CDATA[<p>在验证输入时常要对字符进行操作, 为免重复造轮子, 做个记录<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><ul><li><p>计算字符数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 1个汉字 = 2个字符 **/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBytesNum</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bytesCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> c = str.charAt(i);</span><br><span class="line">        /^[\u0000-\u00ff]$/.test(c) ?  bytesCount += <span class="number">1</span> : bytesCount += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bytesCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>截取前n个字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 截取字符, 一个汉字等于两个字符, ("我是oulafen", 6)=&gt;"我是ou" **/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subString</span>(<span class="params">str, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!str)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'--'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/([^x00-xff])/g</span>, <span class="string">"$1a"</span>).slice(<span class="number">0</span>, n).replace(<span class="regexp">/([^x00-xff])a/g</span>, <span class="string">"$1"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">js操作字符</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="笔记" scheme="https://blog.oulafen.com/tags/笔记/"/>
    
  </entry>
  
  <entry>
    <title>js格式化日期</title>
    <link href="https://blog.oulafen.com/2017/01/20/js-func-2/"/>
    <id>https://blog.oulafen.com/2017/01/20/js-func-2/</id>
    <published>2017-01-20T13:00:28.000Z</published>
    <updated>2021-10-22T17:09:51.808Z</updated>
    
    <content type="html"><![CDATA[<p>根据时间戳格式化日期<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><ul><li>时间戳转为持续时间<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 格式化持续时间 秒时间戳--&gt; 01:10:20**/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatDuration</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> seconds = <span class="built_in">parseInt</span>(value);</span><br><span class="line">    <span class="keyword">var</span> h = <span class="built_in">parseInt</span>(seconds / <span class="number">3600</span>);</span><br><span class="line">    <span class="keyword">var</span> min = <span class="built_in">parseInt</span>((seconds - h * <span class="number">3600</span>) / <span class="number">60</span>);</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">parseInt</span>(seconds - h * <span class="number">3600</span> - min * <span class="number">60</span>);</span><br><span class="line">    <span class="keyword">var</span> string = <span class="string">''</span>;</span><br><span class="line">    h.toString().length == <span class="number">1</span> ? string += <span class="string">'0'</span> : <span class="string">''</span>;</span><br><span class="line">    string += h.toString();</span><br><span class="line">    string += <span class="string">':'</span>;</span><br><span class="line">    min.toString().length == <span class="number">1</span> ? string += <span class="string">'0'</span> : <span class="string">''</span>;</span><br><span class="line">    string += min.toString();</span><br><span class="line">    string += <span class="string">':'</span>;</span><br><span class="line">    s.toString().length == <span class="number">1</span> ? string += <span class="string">'0'</span> : <span class="string">''</span>;</span><br><span class="line">    string += s.toString();</span><br><span class="line">    <span class="keyword">return</span> string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">js格式化日期</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="笔记" scheme="https://blog.oulafen.com/tags/笔记/"/>
    
  </entry>
  
  <entry>
    <title>vue2.0-快速构建高性能的SPA(结合webpack, router, 组件)</title>
    <link href="https://blog.oulafen.com/2016/11/18/vue-2-spa-start/"/>
    <id>https://blog.oulafen.com/2016/11/18/vue-2-spa-start/</id>
    <published>2016-11-18T12:58:29.000Z</published>
    <updated>2021-10-22T17:10:32.684Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>vue真的很强大, 用过它的人都说好<br>SPA(single page app, 即单页面应用)</p></blockquote><p>该文介绍了spa项目的创建, 设置路由, 添加组件, 使用markdown编辑器, 使用webpack实现按需加载, 使用sass等几部分的内容, 内容较多, 慎入<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>项目演示地址: <a href="http://blog.oulafen.com/my-vue-webpack-simple/">戳这里</a><br>项目代码地址: <a href="https://github.com/oulafen/my-vue-webpack-simple" target="_blank" rel="noopener">戳这里</a></p><h3 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h3><ul><li><p>初始化工程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-cli -g  <span class="comment">#install vue-cli</span></span><br><span class="line">vue init webpack-sample my-vue-webpack-simple  <span class="comment"># 创建基于模板webpack-sample的vue项目</span></span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install dependencies</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>开启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启本地服务器, 自带热加载, 默认地址localhost:8080</span></span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建生产环境代码</span></span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用vue-router"><a href="#使用vue-router" class="headerlink" title="使用vue-router"></a>使用vue-router</h3><ul><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router --save</span><br></pre></td></tr></table></figure></li><li><p>配置router<br><code>./src/main.js</code>文件:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//components lists</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/home.vue'</span>;</span><br><span class="line"><span class="keyword">const</span> Foo = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;foo&lt;/div&gt;'</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> Bar = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;bar&lt;/div&gt;'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建子类构造器</span></span><br><span class="line"><span class="keyword">const</span> app = Vue.extend(App);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用模块化机制编程， 要调用 Vue.use(VueRouter)</span></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义路由</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: Home &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/bar'</span>, <span class="attr">component</span>: Bar &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建 router 实例，然后传 `routes` 配置</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载到根实例</span></span><br><span class="line"><span class="keyword">new</span> app(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>);</span><br></pre></td></tr></table></figure></li><li><p>设置路由模板<code>./src/App.vue</code>文件:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"fade"</span> <span class="attr">mode</span>=<span class="string">"out-in"</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加页面过渡css(vue2.0和1.0有些许差别, 详情看<a href="https://vuejs.org/guide/migration.html" target="_blank" rel="noopener">文档</a>)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fade-enter-active</span>, <span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: opacity <span class="number">0.3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fade-enter</span>, <span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="添加组件"><a href="#添加组件" class="headerlink" title="添加组件"></a>添加组件</h2><ul><li>改写<code>home.vue</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">todo-item</span> <span class="attr">v-for</span>=<span class="string">"todo in todos"</span> <span class="attr">v-bind:todo</span>=<span class="string">"todo"</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">my_footer</span>&gt;</span><span class="tag">&lt;/<span class="name">my_footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//定义组件</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> my_footer <span class="keyword">from</span> <span class="string">'./footer.vue'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'home'</span>,</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      msg: <span class="string">'Welcome to Your Vue.js App'</span>,</span></span><br><span class="line">      todos: [</span><br><span class="line"><span class="actionscript">        &#123; text: <span class="string">'Learn JavaScript'</span> &#125;,</span></span><br><span class="line"><span class="actionscript">        &#123; text: <span class="string">'Learn Vue'</span> &#125;,</span></span><br><span class="line"><span class="actionscript">        &#123; text: <span class="string">'Build something awesome'</span> &#125;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="actionscript">  components:&#123;  <span class="comment">//引入组件</span></span></span><br><span class="line"><span class="actionscript">    <span class="string">'my_footer'</span>: my_footer,</span></span><br><span class="line"><span class="actionscript">    <span class="string">'todo-item'</span>: &#123;</span></span><br><span class="line"><span class="actionscript">      props: [<span class="string">'todo'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">      template: '<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; todo.text &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span>'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>添加<code>footer.vue</code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"weui-footer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"weui-footer__links"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">class</span>=<span class="string">"weui-footer__link"</span>&gt;</span>底部链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">class</span>=<span class="string">"weui-footer__link"</span>&gt;</span>底部链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"weui-footer__text"</span>&gt;</span>Copyright © 2008-2016 weui.io<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="使用简单的markdown编辑器"><a href="#使用简单的markdown编辑器" class="headerlink" title="使用简单的markdown编辑器"></a>使用简单的markdown编辑器</h2><p><a href="http://blog.oulafen.com/my-vue-webpack-simple/#/lists/markdown">示例地址</a></p><ul><li><p>引入官网marked文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> marked <span class="keyword">from</span> <span class="string">'../../statics/js/marked@0.3.6.js'</span></span><br></pre></td></tr></table></figure></li><li><p>使用marked方法来计算输入的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"editor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">:value</span>=<span class="string">"input"</span> <span class="attr">v-model</span>=<span class="string">"input"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"weui-panel"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"weui-panel__hd"</span>&gt;</span>markdown预览<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>  <span class="attr">v-html</span>=<span class="string">"compiledMarkdown"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> marked <span class="keyword">from</span> <span class="string">'../../statics/js/marked@0.3.6.js'</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="actionscript">        name:<span class="string">'editor'</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                input: <span class="string">'# input markdown'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="actionscript">            compiledMarkdown: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> marked(<span class="keyword">this</span>.input, &#123;</span></span><br><span class="line"><span class="actionscript">                    sanitize: <span class="literal">true</span></span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"># balabala 省略</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>给代码加高亮<br>引入 highlight 的 js 和 css , 再在 marked 方法中配置下就OK了, 以下给出增加的代码片段, 插到相应位置上就可以了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"editor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../../statics/css/solarized_light.min.css"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//...</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> hljs <span class="keyword">from</span> <span class="string">'../../statics/js/highlight.min'</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//...</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> marked(<span class="keyword">this</span>.input, &#123;</span></span><br><span class="line"><span class="actionscript">        sanitize: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">        highlight: <span class="function"><span class="keyword">function</span><span class="params">(code, lang)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> hljs.highlightAuto(code, [lang]).value;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript"><span class="comment">//...</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>更多的设置自行google<br>源码中默认的配置参数:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">marked.defaults = &#123;</span><br><span class="line">  gfm: <span class="literal">true</span>,</span><br><span class="line">  tables: <span class="literal">true</span>,</span><br><span class="line">  breaks: <span class="literal">false</span>,</span><br><span class="line">  pedantic: <span class="literal">false</span>,</span><br><span class="line">  sanitize: <span class="literal">false</span>,</span><br><span class="line">  sanitizer: <span class="literal">null</span>,</span><br><span class="line">  mangle: <span class="literal">true</span>,</span><br><span class="line">  smartLists: <span class="literal">false</span>,</span><br><span class="line">  silent: <span class="literal">false</span>,</span><br><span class="line">  highlight: <span class="literal">null</span>,</span><br><span class="line">  langPrefix: <span class="string">'lang-'</span>,</span><br><span class="line">  smartypants: <span class="literal">false</span>,</span><br><span class="line">  headerPrefix: <span class="string">''</span>,</span><br><span class="line">  renderer: <span class="keyword">new</span> Renderer,</span><br><span class="line">  xhtml: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="vue-webpack-按需加载的实现"><a href="#vue-webpack-按需加载的实现" class="headerlink" title="vue webpack 按需加载的实现"></a>vue webpack 按需加载的实现</h2><p>我们知道在这之前，使用vue webpack 模板构建出的项目是将所有的js都编译到一个<code>build.js</code>文件中，旨在只加载一次资源，后续会有本地化app的效果，但当业务逻辑较多，组件较多时，这个文件就会很大，从而使首屏加载的时间very very long ~，第一次进入项目就要等上半分乃至几分钟，要是我的话肯定等不鸟→_→;</p><p>那么读到这里，有点经验的肯定会想到，能不能优化成类似requirejs的按需加载，首屏不需要的资源先不加载，到使用时再下载下来；官网的东西还是很强大的，虽然目前国内还没什么现成的例子，但通过官方文档，还是能进展一二的。废话不多说了，下面重点来了</p><ul><li><p>更改<code>webpack.config.js</code>文件，使用webpack的chunk <a href="https://webpack.toobug.net/zh-cn/chapter3/common-chunks-plugin.html" target="_blank" rel="noopener">查看CommonChunks插件</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//初始化webpack 自带的 chunk 插件</span></span><br><span class="line"><span class="keyword">var</span> commonsPlugin = <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">'common'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/main.js'</span>,  <span class="comment">//可引入多个入口文件，编译后的文件个数也会相应增多</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    publicPath: <span class="string">'dist/'</span>,</span><br><span class="line">    filename: <span class="string">'[name].js'</span>,  <span class="comment">//自动生成文件名</span></span><br><span class="line">    chunkFilename: <span class="string">"chunts/[name]-[chunkhash:8].js"</span>    <span class="comment">//生成的子文件路劲/文件名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  plugins: [ commonsPlugin ],</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure></li><li><p>修改入口文件<code>src/main.js</code><br>之前的路由写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">'./components/home.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> lists <span class="keyword">from</span> <span class="string">'./components/lists.vue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: Index &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/home'</span>, <span class="attr">component</span>: home &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/lists'</span>, <span class="attr">component</span>: lists &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li></ul><p>修改之后：<a href="https://cn.vuejs.org/v2/guide/components.html#异步组件" target="_blank" rel="noopener">点击查看官网-异步组件模块</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    component: <span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">require</span>([<span class="string">'./components/index.vue'</span>], resolve)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/home'</span>,</span><br><span class="line">    component: <span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">require</span>([<span class="string">'./components/home.vue'</span>], resolve)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/lists'</span>,</span><br><span class="line">    component: <span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">require</span>([<span class="string">'./components/lists.vue'</span>], resolve)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><p>或者改写成这样：(是不是更加一目了然呢😝)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: view(<span class="string">'index'</span>) &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/home'</span>, <span class="attr">component</span>: view(<span class="string">'home'</span>) &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/lists'</span>, <span class="attr">component</span>: view(<span class="string">'lists'</span>) &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">//rebase url `./components/`</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">view</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>([<span class="string">'./components/'</span> + name + <span class="string">'.vue'</span>], resolve);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><ul><li>在<code>index.html</code>中替换依赖文件<code>build.js</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/common.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>执行<code>npm run build</code>，编译后的文件结构如下<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── <span class="keyword">dist/ </span>                     <span class="comment"># 编译后的目标文件夹</span></span><br><span class="line">│   ├── common.<span class="keyword">js </span>             <span class="comment"># js分发文件</span></span><br><span class="line">│   ├── main.<span class="keyword">js </span>               <span class="comment"># 压缩处理后的入口文件</span></span><br><span class="line">│   └── <span class="keyword">chunts </span>                <span class="comment"># 按需加载的子文件夹</span></span><br><span class="line">│        ├── <span class="number">0</span>-xxxxxx.<span class="keyword">js</span></span><br><span class="line"><span class="keyword">│ </span>       ├── <span class="number">1</span>-xxxxxx.<span class="keyword">js</span></span><br><span class="line"><span class="keyword">│ </span>       ├── <span class="number">2</span>-xxxxxx.<span class="keyword">js</span></span><br><span class="line"><span class="keyword">│ </span>       └── ...</span><br><span class="line">├── ...</span><br></pre></td></tr></table></figure></li></ul><p>如图:</p><p style="text-align: center;"><br><img src="http://statics.oulafen.com/blog_vue-webpack-chunts.jpg" style="margin: auto; width: 50%;"><br></p><br>## 切换路由效果<br><a href="http://router.vuejs.org/zh-cn/advanced/transitions.html" target="_blank" rel="noopener">点击查看官网-过渡效果的介绍</a><br>- 应用场景：同级路由间切换用<code>fade</code>动效，不同级路由间切换时，用<code>slide-left</code>和<code>slide-right</code><br>- 修改<code>src/App.vue</code>文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">:name</span>=<span class="string">"routerTransition"</span> <span class="attr">mode</span>=<span class="string">"out-in"</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        routerTransition: <span class="string">'fade'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line"><span class="javascript">      <span class="string">'$route'</span> (to, <span class="keyword">from</span>) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> toDepth = to.path.split(<span class="string">'/'</span>).length</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> fromDepth = <span class="keyword">from</span>.path.split(<span class="string">'/'</span>).length</span></span><br><span class="line"></span><br><span class="line">        if(toDepth != fromDepth)&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.routerTransition = toDepth &lt; fromDepth ? <span class="string">'slide-right'</span> : <span class="string">'slide-left'</span></span></span><br><span class="line"><span class="actionscript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.routerTransition = <span class="string">'fade'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>- 添加动效css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fade-enter-active</span>, <span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: opacity <span class="number">0.3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fade-enter</span>, <span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-left-enter</span>, <span class="selector-class">.slide-right-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">30px</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">30px</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-left-leave-active</span>, <span class="selector-class">.slide-right-enter</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">30px</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">30px</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-left-enter-active</span>, <span class="selector-class">.slide-left-leave-active</span>, <span class="selector-class">.slide-right-enter-active</span>, <span class="selector-class">.slide-right-leave-active</span>&#123;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">3s</span> <span class="built_in">cubic-bezier</span>(.<span class="number">55</span>,<span class="number">0</span>,.<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>效果图如下:<br><p style="text-align: center;"><br><img src="http://statics.oulafen.com/blog_vue_spa_demo_index_2.gif" style="margin: auto;"><br></p><h2 id="使用scss"><a href="#使用scss" class="headerlink" title="使用scss"></a>使用scss</h2><ul><li><p>安装依赖</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install sass-loader <span class="keyword">node</span><span class="title">-sass</span> --save-dev</span><br></pre></td></tr></table></figure></li><li><p>配置webpack config</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line"><span class="symbol">  module:</span> &#123;</span><br><span class="line"><span class="symbol">    rules:</span> [</span><br><span class="line">      ...,</span><br><span class="line">      &#123;</span><br><span class="line"><span class="symbol">        test:</span> /\.scss$/,</span><br><span class="line"><span class="symbol">        loaders:</span> [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>, <span class="string">"sass-loader"</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>在模块中引入scss文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"../statics/css/style.scss"</span>);</span><br></pre></td></tr></table></figure></li></ul><p>参考链接:<a href="https://github.com/jtangelder/sass-loader" target="_blank" rel="noopener">https://github.com/jtangelder/sass-loader</a></p><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><ul><li>build项目之后, 静态资源的如图片加载失败<br>  原因肯定是路径不对, 所以才找不到, 建议将<code>webpack.config.js</code>中的<code>publicPath</code>改为路径<code>dist/</code>, 若不行,再查看其它有关路径设置的地方</li></ul>]]></content>
    
    
    <summary type="html">vue2.0-快速构建SPA</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="vue" scheme="https://blog.oulafen.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>nodejs之redis的安装与使用</title>
    <link href="https://blog.oulafen.com/2016/10/17/node-redis/"/>
    <id>https://blog.oulafen.com/2016/10/17/node-redis/</id>
    <published>2016-10-17T13:00:29.000Z</published>
    <updated>2020-05-14T03:03:56.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redis简介"><a href="#redis简介" class="headerlink" title="redis简介"></a>redis简介</h2><ul><li>开源高性能key-value存储；采用内存中（in-memory）数据集的方式，也可以采用磁盘存储方式（前者性能高，但数据可能丢失，后者正好相反）</li><li>支持字符串（strings）、哈希（hashes）、列表（lists）、集合（sets）和 有序集合（sorted sets）等；支持对复杂数据结构的高速操作。</li><li>特性多，支持主从同步、pub/sub等</li><li>支持多种客户端<a href="http://redis.io/clients" target="_blank" rel="noopener">http://redis.io/clients</a><a id="more"></a></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install redis</span><br><span class="line"><span class="meta">#</span><span class="bash">或者</span></span><br><span class="line">npm install hiredis redis</span><br></pre></td></tr></table></figure><p>注：两种都可用，区别在于性能，hiredis是非阻塞的，而且速度更快；如果安装了hiredis，node_redis则会默认以它为解析器，没安装就会用纯javascript解释器，对于学习或者开发环境，用哪个都无所谓</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> redis = <span class="built_in">require</span>(<span class="string">'redis'</span>),</span><br><span class="line">    RDS_PORT = <span class="number">6379</span>,        <span class="comment">//端口号</span></span><br><span class="line">    RDS_HOST = <span class="string">'localhost'</span>,    <span class="comment">//服务器ip或域名</span></span><br><span class="line">    RDS_PWD = <span class="string">'password'</span>,    <span class="comment">//服务器密码</span></span><br><span class="line">    RDS_OPTS = &#123;<span class="attr">auth_pass</span>: RDS_PWD&#125;,     <span class="comment">//设置项, 若没有密码, 则设为空对象&#123;&#125;即可</span></span><br><span class="line">    client = redis.createClient(RDS_PORT, RDS_HOST, RDS_OPTS);</span><br><span class="line">   </span><br><span class="line">client.auth(RDS_PWD, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'通过认证'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">client.on(<span class="string">'ready'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ready'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">client.on(<span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    client.set(<span class="string">'name'</span>, <span class="string">'oulafen'</span>, redis.print)</span><br><span class="line">    client.get(<span class="string">'name'</span>, redis.print)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">    client.set(key,value,[callback])：设置单个key和value，回调函数可选</span></span><br><span class="line"><span class="comment">    client.set([key,value],callback)：与client.set(key,value,[callback]);效果一致（可以自行对上面示例源码进行修改进行测试）,必须要有回调函数</span></span><br><span class="line"><span class="comment">    client.get(key, [callback])：通过key得到value，回调函数可选, 如下可判断返回值</span></span><br><span class="line"><span class="comment">    client.get(key, function(err, reply)&#123;</span></span><br><span class="line"><span class="comment">        if(!err)&#123;</span></span><br><span class="line"><span class="comment">            console.log(reply);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if(err)&#123;</span></span><br><span class="line"><span class="comment">            console.log(err);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;);</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">client.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'连接失败:'</span>, err);  <span class="comment">//redis连接失败后会自动再重连至少3次, 每次失败都会走error方法</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>参考:<br><a href="http://www.cnblogs.com/zhongweiv/p/node_redis.html" target="_blank" rel="noopener">Nodejs学习笔记（九）— 与Redis的交互（mranney/node_redis）入门</a></p>]]></content>
    
    
    <summary type="html">nodejs之redis的安装与使用</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="node" scheme="https://blog.oulafen.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>vue.js-快速构建webpack项目模板</title>
    <link href="https://blog.oulafen.com/2016/10/11/vue-webpack/"/>
    <id>https://blog.oulafen.com/2016/10/11/vue-webpack/</id>
    <published>2016-10-11T12:58:29.000Z</published>
    <updated>2021-10-22T17:10:32.683Z</updated>
    
    <content type="html"><![CDATA[<p>官方基于webpack提供了两种项目模板，分别是vue-webpack-simple模板和vue-webpack模板，今天我们将介绍官方提供的这两种项目模板，并用vue-webpack-simple模板创建一个简单的示例。<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a>环境准备：</h3><ul><li>node环境 和 基于shell的命令行工具，如windows下的git bash, mac 和 linux下的terminal，以下统称为终端。</li><li>npm包管理工具，最好在3.x以上，npm 3.x提供了更有效的包依赖管理。</li><li>安装<code>vue-li</code>, 命令如下：<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure></li></ul><p>安装完vue cli后，我们就可以基于vue-webpack-simple模板和vue-webpack模板创建项目了。</p><h3 id="使用vue-webpack-simple模板"><a href="#使用vue-webpack-simple模板" class="headerlink" title="使用vue-webpack-simple模板"></a>使用vue-webpack-simple模板</h3><ul><li><p>在终端中运行如下命令，其中<code>webpack-simple</code>是项目模板的名称，<code>my-webpack-simple-demo</code>是你要生成的项目名称。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack-<span class="built_in">simple</span> my-webpack-<span class="built_in">simple</span>-demo</span><br></pre></td></tr></table></figure></li><li><p>执行完成之后，生成的文件目录结构：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├─<span class="selector-class">.babelrc</span>        <span class="comment">// babel配置文件</span></span><br><span class="line">├─<span class="selector-class">.gitignore</span>    </span><br><span class="line">├─index<span class="selector-class">.html</span>        <span class="comment">// 主页</span></span><br><span class="line">├─package<span class="selector-class">.json</span>      <span class="comment">// 项目配置文件</span></span><br><span class="line">├─README<span class="selector-class">.md</span>  </span><br><span class="line">├─webpack<span class="selector-class">.config</span><span class="selector-class">.js</span> <span class="comment">// webpack配置文件</span></span><br><span class="line">├─dist          <span class="comment">// 发布目录</span></span><br><span class="line">│   ├─<span class="selector-class">.gitkeep</span>       </span><br><span class="line">├─src           <span class="comment">// 开发目录 </span></span><br><span class="line">│   ├─App<span class="selector-class">.vue</span>       <span class="comment">// App.vue组件</span></span><br><span class="line">│   ├─main<span class="selector-class">.js</span>       <span class="comment">// 预编译入口</span></span><br></pre></td></tr></table></figure></li><li><p>进到项目文件目录下安装依赖</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd my-webpack-simple-demo</span><br><span class="line">cnpm install   </span><br><span class="line"><span class="meta">#在国内使用cnpm的来安装依赖速度快的不止一倍，安装方法： npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org，</span></span></span><br></pre></td></tr></table></figure></li><li><p>运行示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">run</span><span class="bash"> dev</span></span><br></pre></td></tr></table></figure></li><li><p>打开<code>http://localhost:8080/</code>：<br><img src="http://statics.oulafen.com/github-webpack-sample.png" alt style="max-width:100%; margin: auto;"><br>注意：执行<code>npm run dev</code>命令后并不会在dist目录下生成build.js文件，开发环境下build.js是在运行内存中的。</p></li><li>执行以下命令会生成发布时的build.js，并且是经过压缩的。<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">run</span><span class="bash"> build</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="使用vue-webpack模板"><a href="#使用vue-webpack模板" class="headerlink" title="使用vue-webpack模板"></a>使用vue-webpack模板</h3><p>过程与使用<code>webpack-simple</code>模板时类似</p><ul><li><p>生成项目文件</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack <span class="keyword">my</span>-webpack-demo</span><br></pre></td></tr></table></figure></li><li><p>目录结构如下：(参考：<a href="https://vuejs-templates.github.io/webpack/structure.html" target="_blank" rel="noopener">Project Structure</a>)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">├── build/                      # webpack<span class="built_in"> config </span>files</span><br><span class="line">│   └── <span class="built_in">..</span>.</span><br><span class="line">├── config/                     </span><br><span class="line">│   ├── index.js                # main project config</span><br><span class="line">│   └── <span class="built_in">..</span>.</span><br><span class="line">├── src/</span><br><span class="line">│   ├── main.js                 # app entry file</span><br><span class="line">│   ├── App.vue                 # main app component</span><br><span class="line">│   ├── components/             # ui components</span><br><span class="line">│   │   └── <span class="built_in">..</span>.</span><br><span class="line">│   └── assets/                 # module assets (processed by webpack)</span><br><span class="line">│       └── <span class="built_in">..</span>.</span><br><span class="line">├── static/                     # pure static assets (directly copied)</span><br><span class="line">├── test/</span><br><span class="line">│   └── unit/                   # unit tests</span><br><span class="line">│   │   ├── specs/              # test spec files</span><br><span class="line">│   │   ├── index.js            # test build entry file</span><br><span class="line">│   │   └── karma.conf.js       # test runner<span class="built_in"> config </span>file</span><br><span class="line">│   └── e2e/                    # e2e tests</span><br><span class="line">│   │   ├── specs/              # test spec files</span><br><span class="line">│   │   ├── custom-assertions/  # custom assertions <span class="keyword">for</span> e2e tests</span><br><span class="line">│   │   ├── runner.js           # test runner script</span><br><span class="line">│   │   └── nightwatch.conf.js  # test runner<span class="built_in"> config </span>file</span><br><span class="line">├── .babelrc                    # babel config</span><br><span class="line">├── .editorconfig.js            # editor config</span><br><span class="line">├── .eslintrc.js                # eslint config</span><br><span class="line">├── index.html                  # index.html template</span><br><span class="line">└── package.json                # build scripts <span class="keyword">and</span> dependencies</span><br></pre></td></tr></table></figure></li><li><p>安装依赖 <code>npm install</code></p></li><li>执行以下命令运行示例：<code>npm run dev</code></li><li>打开<code>http://localhost:8080/</code>：<br><img src="http://statics.oulafen.com/github-webpack.png" alt style="max-width:100%; margin: auto;"></li><li>生成发布：<code>npm run build</code><br>和<code>vue-simple-webpack</code>模板不同的是，所有的静态资源，包括<code>index.html</code>都生成到<code>dist</code>目录下了。<br>这意味着你可以直接拿着dist目录去发布应用，例如在IIS下将dist目录发布为一个网站。</li></ul><p>阅读参考:</p><ul><li><a href="http://www.cnblogs.com/keepfool/p/5678427.html" target="_blank" rel="noopener">Vue.js——60分钟webpack项目模板快速入门</a></li></ul>]]></content>
    
    
    <summary type="html">vue.js-快速构建webpack项目模板</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="vue" scheme="https://blog.oulafen.com/tags/vue/"/>
    
    <category term="webpack" scheme="https://blog.oulafen.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>整理vue-1.0之旅</title>
    <link href="https://blog.oulafen.com/2016/09/16/vue-1/"/>
    <id>https://blog.oulafen.com/2016/09/16/vue-1/</id>
    <published>2016-09-16T13:00:28.000Z</published>
    <updated>2021-10-22T17:10:32.684Z</updated>
    
    <content type="html"><![CDATA[<p>vue, 老早就想总结一下了, 这个可不是那个vue视频编辑器, 而是一出生就在前端界刮起一阵强风的js框架, 被广泛用于前后端项目中, 火, 是有一定道理的, 废话少说, 用用就知道了, 快来看正文<br><a id="more"></a><br><a href="http://v1-cn.vuejs.org/guide/" target="_blank" rel="noopener">VUE 1.0 官网文档戳这里</a></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>下载js包, <a href="http://cdnjs.cloudflare.com/ajax/libs/vue/1.0.26/vue.min.js" target="_blank" rel="noopener">cdn下载地址</a></li><li>在页面body最后引入vue文件, 更多其他诸如<code>npm</code> <code>bower</code>的安装方式<a href="http://v1-cn.vuejs.org/guide/installation.html" target="_blank" rel="noopener">戳官方安装</a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/statics/js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="使用总结"><a href="#使用总结" class="headerlink" title="使用总结"></a>使用总结</h2><ul><li><h3 id="定义作用域"><a href="#定义作用域" class="headerlink" title="定义作用域"></a>定义作用域</h3></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;  <span class="comment">&lt;!--在页面中渲染出来的结果是 Hello Vue.js! --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>, <span class="comment">//支持选择器包括id, class, 标签(最好是唯一的, 比如body)</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'Hello Vue.js!'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3></li></ul><p>属性绑定:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:disabled</span>=<span class="string">"someDynamicCondition"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">"someDynamicCondition"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- 缩写 --&gt;</span></span><br></pre></td></tr></table></figure></p><p>class与style绑定:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--class绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static"</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; 'class-a': isA, 'class-b': isB &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!--hash法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[classA, isB ? classB : '']"</span>&gt;</span> <span class="comment">&lt;!--数组法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[classA, &#123; classB: isB, classC: isC &#125;]"</span>&gt;</span> <span class="comment">&lt;!--在 1.0.19+ 中，可以在数组语法中使用对象语法---&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--style绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"styleObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[styleObjectA, styleObjectB]"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  isA : <span class="literal">false</span>,</span><br><span class="line">  isB : <span class="literal">true</span>,</span><br><span class="line">  activeColor: <span class="string">'red'</span>,</span><br><span class="line">  fontSize: <span class="number">30</span>,</span><br><span class="line">  styleObject: &#123;</span><br><span class="line">    color: <span class="string">'red'</span>,</span><br><span class="line">    fontSize: <span class="string">'13px'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事件绑定:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--传参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"sayHi('hi')"</span>&gt;</span>Say Hi<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--传原生事件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"sayHello('hello!', $event)"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 在 `methods` 对象中定义方法</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    doSomething: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 方法内 `this` 指向 vm</span></span><br><span class="line">      alert(<span class="string">'Hello '</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>)</span><br><span class="line">      <span class="comment">// `event` 是原生 DOM 事件</span></span><br><span class="line">      alert(event.target.tagName)</span><br><span class="line">    &#125;,</span><br><span class="line">    sayHi: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">        alert(str);</span><br><span class="line">    &#125;,</span><br><span class="line">    sayHello: <span class="function"><span class="keyword">function</span>(<span class="params">msg, event</span>)</span>&#123;</span><br><span class="line">       event.preventDefault()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>按键修饰符:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 别名 同上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--全部的按键别名：enter tab delete esc space up down left right--&gt;</span></span><br></pre></td></tr></table></figure></p><p>1.0.17+： 可以自定义按键别名：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以使用 @keyup.f1</span></span><br><span class="line">Vue.directive(<span class="string">'on'</span>).keyCodes.f1 = <span class="number">112</span></span><br></pre></td></tr></table></figure></p><ul><li><h3 id="数据监听"><a href="#数据监听" class="headerlink" title="数据监听"></a>数据监听</h3></li></ul><p>watch:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    currentTab: <span class="string">'#tab1'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="comment">// 监听header nav tab变化, 请求相应的数据</span></span><br><span class="line">    currentTab: <span class="function"><span class="keyword">function</span> (<span class="params">val, oldVal</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(val == <span class="string">'#tab1'</span>)&#123;</span><br><span class="line">        <span class="comment">//获取活动列表balabala...</span></span><br><span class="line">        <span class="comment">//mainPage.getActivityLists();</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(val == <span class="string">'#tab2'</span>)&#123;</span><br><span class="line">        <span class="comment">//获取报名审核列表balabala...</span></span><br><span class="line">        <span class="comment">//mainPage.getSignCheckLists();</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><ul><li><h3 id="优化数据没加载出来时-出现vue的大括号的情况"><a href="#优化数据没加载出来时-出现vue的大括号的情况" class="headerlink" title="优化数据没加载出来时, 出现vue的大括号的情况"></a>优化数据没加载出来时, 出现vue的大括号的情况</h3>解决方法是在有vue数据渲染的块上 添加<code>v-cloak</code>, 如:</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"example-1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">    &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并设置css隐藏, vue会自动在块内数据运算完后再显示出来<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[v-cloak]</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">vue 1.0 入门</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="vue" scheme="https://blog.oulafen.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>判断密码强度</title>
    <link href="https://blog.oulafen.com/2016/08/25/judge-password-strength/"/>
    <id>https://blog.oulafen.com/2016/08/25/judge-password-strength/</id>
    <published>2016-08-25T13:00:29.000Z</published>
    <updated>2021-10-22T17:09:55.604Z</updated>
    
    <content type="html"><![CDATA[<p>在填写密码时怎么判断密码的强度. 原理很简单, 类型越多 密码长度越长,则密码强度越高, 基于这样的原则, 现实现如下:<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算二进制中1出现的次数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bit_count</span>(<span class="params">n</span>) </span>&#123;   </span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">       <span class="keyword">if</span> ((n &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">           ++c;</span><br><span class="line">       &#125;</span><br><span class="line">       n = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检测用户提供的字符串包含几种类型（数字、大写字母、小写字母、特殊字符）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">total_mode</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> len = str.length;</span><br><span class="line">   <span class="keyword">var</span> mode = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">       mode = mode | char_type(str[i].charCodeAt());</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">return</span> bit_count(mode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试用户提供的密码强度</span></span><br><span class="line"><span class="comment">// 返回值 -- 弱：0，中：1，高：2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_strength</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> len = str.length;</span><br><span class="line">   <span class="keyword">var</span> mode = total_mode(str);</span><br><span class="line">   <span class="keyword">if</span> (mode == <span class="number">1</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (mode == <span class="number">2</span> || (len &gt; <span class="number">6</span> &amp;&amp; len &lt;= <span class="number">8</span>))&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (len &gt; <span class="number">8</span> &amp;&amp; (mode == <span class="number">3</span> || mode == <span class="number">4</span>))&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   <span class="comment">// 字符串类型1，属于弱强度密码</span></span><br><span class="line">   <span class="comment">// 字符串类型2 或 密码长度大于6且小于8，属于中强度密码</span></span><br><span class="line">   <span class="comment">// 字符串类型3或4 且 密码长度大于8，属于高强度密码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">判断密码强度</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="前端" scheme="https://blog.oulafen.com/tags/前端/"/>
    
  </entry>
  
  <entry>
    <title>js和node中的正则验证总结</title>
    <link href="https://blog.oulafen.com/2016/08/24/validate-summary/"/>
    <id>https://blog.oulafen.com/2016/08/24/validate-summary/</id>
    <published>2016-08-24T13:00:29.000Z</published>
    <updated>2021-10-22T17:10:32.684Z</updated>
    
    <content type="html"><![CDATA[<p>在做前端的过程中经常遇到各类验证, 本文记录了利用正则进行常规的表单验证, 以及对客户端的判断.<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><ul><li><p>表单正则判断</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> validateReg = &#123;</span><br><span class="line">    <span class="string">"only_chinese_english"</span>: <span class="regexp">/^\+?[a-zA-z\u4e00-\u9fa5 ]*$/</span> <span class="comment">/** 输入中文或英文字符，不允许特殊字符 **/</span></span><br><span class="line">    , <span class="string">"double_byte"</span>: <span class="regexp">/^[\u0000-\u00ff]$/</span>   <span class="comment">/** 双字节字符 **/</span></span><br><span class="line">    , <span class="string">"p_int"</span>: <span class="regexp">/^[1-9]*[1-9][0-9]*$/</span>   <span class="comment">/** 正整数 **/</span></span><br><span class="line">    , <span class="string">"p_num_top_0"</span>: <span class="regexp">/^\d+(?=\.&#123;0,1&#125;\d+$|$)/</span>   <span class="comment">/** 大于零的数 **/</span></span><br><span class="line">    , <span class="string">"tel"</span>: <span class="regexp">/^(([0\+]\d&#123;2,3&#125;-)?(0\d&#123;2,3&#125;)-)?(\d&#123;7,8&#125;)(-(\d&#123;3,&#125;))?$/</span>   <span class="comment">/** "021-60825088","0427-7531992","76423865" **/</span></span><br><span class="line">    , <span class="string">"phone"</span>: <span class="regexp">/^1[3|4|5|7|8][0-9]&#123;9&#125;$/</span> <span class="comment">/** 15120007555 **/</span></span><br><span class="line">    , <span class="string">"email"</span>: <span class="regexp">/^([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+\.[a-zA-Z]&#123;2,3&#125;$/</span> <span class="comment">/** oulafen@gmail.com **/</span></span><br><span class="line">    , <span class="string">"url"</span>: <span class="regexp">/^http:\/\/([\w-]+\.)+[\w-]+(\/[\w- .\/?%&amp;=]*)?$/</span>  <span class="comment">/** http://blog.oulafen.com **/</span></span><br><span class="line">    , <span class="string">"IP"</span>: <span class="regexp">/^(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])$/</span>  <span class="comment">/** 192.168.25.103 **/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//验证邮箱</span></span><br><span class="line">validateReg.email.test(<span class="string">'oulafen@qq.com'</span>);</span><br><span class="line"><span class="comment">//获取字符长度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getByteNum</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bytesCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> c = str.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (validateReg.double_byte.test(c))&#123; <span class="comment">//匹配双字节</span></span><br><span class="line">            bytesCount += <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            bytesCount += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bytesCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>客户端判断之<code>javascript</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> browser = &#123;</span><br><span class="line">    <span class="string">"versions"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> u = navigator.userAgent,</span><br><span class="line">        ua = navigator.userAgent.toLowerCase();</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="comment">//移动终端浏览器版本信息</span></span><br><span class="line">            trident: u.indexOf(<span class="string">'Trident'</span>) &gt; <span class="number">-1</span>, <span class="comment">//IE内核</span></span><br><span class="line">            presto: u.indexOf(<span class="string">'Presto'</span>) &gt; <span class="number">-1</span>, <span class="comment">//opera内核</span></span><br><span class="line">            webKit: u.indexOf(<span class="string">'AppleWebKit'</span>) &gt; <span class="number">-1</span>, <span class="comment">//苹果、谷歌内核</span></span><br><span class="line">            gecko: u.indexOf(<span class="string">'Gecko'</span>) &gt; <span class="number">-1</span> &amp;&amp; u.indexOf(<span class="string">'KHTML'</span>) == <span class="number">-1</span>, <span class="comment">//火狐内核</span></span><br><span class="line">            mobile: !!u.match(<span class="regexp">/AppleWebKit.*Mobile.*/</span>), <span class="comment">//是否为移动终端</span></span><br><span class="line">            ios: !!u.match(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>), <span class="comment">//ios终端</span></span><br><span class="line">            android: u.indexOf(<span class="string">'Android'</span>) &gt; <span class="number">-1</span> || u.indexOf(<span class="string">'Linux'</span>) &gt; <span class="number">-1</span>, <span class="comment">//android终端或uc浏览器</span></span><br><span class="line">            iPhone: u.indexOf(<span class="string">'iPhone'</span>) &gt; <span class="number">-1</span>, <span class="comment">//是否为iPhone或者QQHD浏览器</span></span><br><span class="line">            iPad: u.indexOf(<span class="string">'iPad'</span>) &gt; <span class="number">-1</span>, <span class="comment">//是否iPad</span></span><br><span class="line">            webApp: u.indexOf(<span class="string">'Safari'</span>) == <span class="number">-1</span> ,<span class="comment">//是否web应该程序，没有头部与底部</span></span><br><span class="line">            wechat:ua.match(<span class="regexp">/MicroMessenger/i</span>) == <span class="string">"micromessenger"</span>,<span class="comment">//微信</span></span><br><span class="line">            weibo:ua.match(<span class="regexp">/WeiBo/i</span>) == <span class="string">"weibo"</span>,<span class="comment">//微博</span></span><br><span class="line">            qq:ua.match(<span class="regexp">/QQ/i</span>) == <span class="string">"qq"</span><span class="comment">//qq</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;(),</span><br><span class="line"><span class="string">"language"</span>: (navigator.browserLanguage || navigator.language).toLowerCase()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>客户端判断之<code>nodejs</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var browser= function(req) &#123;</span><br><span class="line">    var u = req.headers[&apos;user-agent&apos;];</span><br><span class="line">    var ua = u.toLowerCase();</span><br><span class="line">    //移动终端浏览器版本信息</span><br><span class="line">    return &#123;</span><br><span class="line">        trident: u.indexOf(&apos;Trident&apos;) &gt; -1, //IE内核</span><br><span class="line">        presto: u.indexOf(&apos;Presto&apos;) &gt; -1, //opera内核</span><br><span class="line">        webKit: u.indexOf(&apos;AppleWebKit&apos;) &gt; -1, //苹果、谷歌内核</span><br><span class="line">        gecko: u.indexOf(&apos;Gecko&apos;) &gt; -1 &amp;&amp; u.indexOf(&apos;KHTML&apos;) == -1, //火狐内核</span><br><span class="line">        mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端</span><br><span class="line">        ios: !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端</span><br><span class="line">        android: u.indexOf(&apos;Android&apos;) &gt; -1 || u.indexOf(&apos;Linux&apos;) &gt; -1, //android终端或uc浏览器</span><br><span class="line">        iPhone: u.indexOf(&apos;iPhone&apos;) &gt; -1, //是否为iPhone或者QQHD浏览器</span><br><span class="line">        iPad: u.indexOf(&apos;iPad&apos;) &gt; -1, //是否iPad</span><br><span class="line">        webApp: u.indexOf(&apos;Safari&apos;) == -1, //是否web应该程序，没有头部与底部</span><br><span class="line">        wechat: ua.match(/MicroMessenger/i) == &quot;micromessenger&quot;,//微信</span><br><span class="line">        weibo: ua.match(/WeiBo/i) == &quot;weibo&quot;,//微博</span><br><span class="line">        qq: ua.match(/QQ/i) == &quot;qq&quot;//QQ空间</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">exports.browser=browser;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">js和node中的正则验证总结</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="正则" scheme="https://blog.oulafen.com/tags/正则/"/>
    
  </entry>
  
  <entry>
    <title>nodejs中的base64转码/解码</title>
    <link href="https://blog.oulafen.com/2016/07/07/node-base64-encoding-decoding/"/>
    <id>https://blog.oulafen.com/2016/07/07/node-base64-encoding-decoding/</id>
    <published>2016-07-07T13:00:29.000Z</published>
    <updated>2021-10-22T17:10:32.684Z</updated>
    
    <content type="html"><![CDATA[<p>在nodejs中怎么将字符串转化为base64呢? 是不是也像php中的<code>base64_encode()</code>一样简单呢?<br><a id="more"></a><br>作为<code>javascript</code>的nodejs, 对于编码字符串有个更合乎逻辑的方法, 而不是设置各种不一样的全局方法.</p><p>入题吧, 看如下的实现方法:</p><h3 id="编码-encode-将正常的字符串转为base64串"><a href="#编码-encode-将正常的字符串转为base64串" class="headerlink" title="编码(encode)-将正常的字符串转为base64串"></a>编码(encode)-将正常的字符串转为base64串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> Buffer(<span class="string">'JavaScript'</span>);</span><br><span class="line"><span class="keyword">var</span> base_str = str.toString(<span class="string">'base64'</span>);</span><br><span class="line"><span class="comment">// base_str = SmF2YVNjcmlwdA==</span></span><br></pre></td></tr></table></figure><h3 id="解码-decode-将base64串转为正常的字符串"><a href="#解码-decode-将base64串转为正常的字符串" class="headerlink" title="解码(decode)-将base64串转为正常的字符串"></a>解码(decode)-将base64串转为正常的字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> base_str = <span class="keyword">new</span> Buffer(<span class="string">'SmF2YVNjcmlwdA=='</span>, <span class="string">'base64'</span>)</span><br><span class="line"><span class="keyword">var</span> str = base_str.toString();</span><br><span class="line"><span class="comment">// str = JavaScript</span></span><br></pre></td></tr></table></figure><h2 id="关于Buffer的种种"><a href="#关于Buffer的种种" class="headerlink" title="关于Buffer的种种"></a>关于<code>Buffer</code>的种种</h2><ul><li>什么时候该用buffer，什么时候不该用<br>  有测试证明: 我们在保存字符串的时候，该用string还是要用string，就算大字符串拼接string的速度也不会比buffer慢。<br>  那什么时候我们又需要用buffer呢？没办法的时候，当我们保存非utf-8字符串，2进制等等其他格式的时候，我们就必须得使用了。</li><li>buffer不得不提的8KB<br>  buffer著名的8KB载体，举个例子好比，node把一幢大房子分成很多小房间，每个房间能容纳8个人，为了保证房间的充分使用，只有当一个房间塞满8个人后才会去开新的房间，但是当一次性有多个人来入住，node会保证要把这些人放到一个房间中，比如当前房间A有4个人住，但是一下子来了5个人，所以node不得不新开一间房间B，把这5个人安顿下来，此时又来了4个人，发现5个人的B房间也容纳不下了，只能再开一间房间C了，这样所有人都安顿下来了。但是之前的两间房A和B都各自浪费了4个和3个位置，而房间C就成为了当前的房间。<br>  具体点说就是当我们实例化一个新的Buffer类，会根据实例化时的大小去申请内存空间，如果需要的空间小于8KB，则会多一次判定，判定当前的8KB载体剩余容量是否够新的buffer实例，如果够用，则将新的buffer实例保存在当前的8KB载体中，并且更新剩余的空间。</li><li>独享的空间<br>  如果你想创建一个独享的空间，独立的对这块内存空间进行读写，有两种办法，1是实例化一个超过8KB长度的buffer，另外一个就是使用slowbuffer类。</li><li>清空buffer<br>  刷掉一块buffer上的数据最快的办法是buffer.fill</li></ul><p>阅读参考:</p><ul><li><a href="http://www.hacksparrow.com/base64-encoding-decoding-in-node-js.html" target="_blank" rel="noopener">Base64 Encoding / Decoding in Node.js</a></li></ul><p>关于Buffer类的详细介绍参见:</p><ul><li><a href="http://javascript.ruanyifeng.com/nodejs/buffer.html" target="_blank" rel="noopener">《JavaScript 标准参考教程（alpha）》-Buffer对象</a></li><li><a href="https://cnodejs.org/topic/5189ff4f63e9f8a54207f60c" target="_blank" rel="noopener">浅析nodejs的buffer类</a></li></ul>]]></content>
    
    
    <summary type="html">nodejs中的base64转码和解码方法</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="node" scheme="https://blog.oulafen.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>使用canvas绘制虚线</title>
    <link href="https://blog.oulafen.com/2016/07/05/canvas-dashed-line/"/>
    <id>https://blog.oulafen.com/2016/07/05/canvas-dashed-line/</id>
    <published>2016-07-05T13:00:28.000Z</published>
    <updated>2021-10-22T17:06:10.648Z</updated>
    
    <content type="html"><![CDATA[<p>canvas自身的api里没有绘制虚线的功能, 本片记录使用canvas绘制虚线的方法.<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>定义:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.CanvasRenderingContext2D &amp;&amp; CanvasRenderingContext2D.prototype.lineTo) &#123;</span><br><span class="line">    CanvasRenderingContext2D.prototype.dashedLine = <span class="function"><span class="keyword">function</span> (<span class="params">x, y, x2, y2, dashArray</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!dashArray) dashArray = [<span class="number">5</span>, <span class="number">5</span>];</span><br><span class="line">        <span class="keyword">var</span> dashCount = dashArray.length;</span><br><span class="line">        <span class="keyword">this</span>.moveTo(x, y);</span><br><span class="line">        <span class="keyword">var</span> dx = (x2 - x), dy = (y2 - y);</span><br><span class="line">        <span class="keyword">var</span> slope = dy / dx;</span><br><span class="line">        <span class="keyword">var</span> distRemaining = <span class="built_in">Math</span>.sqrt(dx * dx + dy * dy);</span><br><span class="line">        <span class="keyword">var</span> dashIndex = <span class="number">0</span>, draw = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (distRemaining &gt;= <span class="number">0.1</span> &amp;&amp; dashIndex &lt; <span class="number">10000</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> dashLength = dashArray[dashIndex++ % dashCount];</span><br><span class="line">            <span class="keyword">if</span> (dashLength == <span class="number">0</span>) dashLength = <span class="number">0.001</span>; <span class="comment">// Hack for Safari</span></span><br><span class="line">            <span class="keyword">if</span> (dashLength &gt; distRemaining) dashLength = distRemaining;</span><br><span class="line">            <span class="keyword">var</span> xStep = <span class="built_in">Math</span>.sqrt(dashLength * dashLength / (<span class="number">1</span> + slope * slope));</span><br><span class="line">            x += xStep</span><br><span class="line">            y += slope * xStep;</span><br><span class="line">            <span class="keyword">this</span>[draw ? <span class="string">'lineTo'</span> : <span class="string">'moveTo'</span>](x, y);</span><br><span class="line">            distRemaining -= dashLength;</span><br><span class="line">            draw = !draw;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Ensure that the last segment is closed for proper stroking</span></span><br><span class="line">        <span class="keyword">this</span>.moveTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dashedLine</span>(<span class="params">context, startX, startY, endX, endY</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(canvasID);</span><br><span class="line">    <span class="keyword">var</span> cxt = context;</span><br><span class="line">    <span class="keyword">var</span> dashes = [<span class="number">5</span>,<span class="number">5</span>];</span><br><span class="line">    cxt.lineWidth = <span class="string">"3"</span>;</span><br><span class="line">    cxt.lineCap = <span class="string">"round"</span>;</span><br><span class="line">    cxt.beginPath();</span><br><span class="line">    cxt.strokeStyle = <span class="string">'blue'</span>;</span><br><span class="line">    <span class="comment">//开始画虚线。</span></span><br><span class="line">    cxt.dashedLine(startX, startY, endX, endY, dashes);</span><br><span class="line">    cxt.closePath();</span><br><span class="line">    cxt.stroke();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>示例:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">'canvas'</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"500"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> context = canvas.getContext(<span class="string">'2d'</span>);</span></span><br><span class="line">dashedLine(context, 0 ,0, 200, 200);</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">使用canvas绘制虚线</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="前端" scheme="https://blog.oulafen.com/tags/前端/"/>
    
  </entry>
  
  <entry>
    <title>关于grunt的一二三</title>
    <link href="https://blog.oulafen.com/2016/06/12/grunt/"/>
    <id>https://blog.oulafen.com/2016/06/12/grunt/</id>
    <published>2016-06-12T13:00:29.000Z</published>
    <updated>2020-05-14T03:03:56.385Z</updated>
    
    <content type="html"><![CDATA[<p>grunt是一套前端自动化工具，一个基于nodeJs的命令行工具，一般用于：<br>      ① 压缩文件<br>      ② 合并文件<br>      ③ 简单语法检查<br><a id="more"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g grunt-cli</span><br></pre></td></tr></table></figure><h2 id="设置配置文件"><a href="#设置配置文件" class="headerlink" title="设置配置文件"></a>设置配置文件</h2><p>在使用grunt的项目中, 都有个<code>Gruntfile.js</code>的配置文件</p><ul><li><p>参考如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">grunt</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Project configuration.</span></span><br><span class="line">    grunt.initConfig(&#123;</span><br><span class="line">        <span class="comment">//Read the package.json (optional)</span></span><br><span class="line">        pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Metadata.</span></span><br><span class="line">        meta: &#123;</span><br><span class="line">            basePath: <span class="string">'./'</span>,</span><br><span class="line">            srcJsPath: <span class="string">'./public/js/'</span>,  <span class="comment">//js目录地址</span></span><br><span class="line">            srcSassPath: <span class="string">'./public/css/'</span>,  <span class="comment">//sass文件目录地址</span></span><br><span class="line">            srcImgPath: <span class="string">'./public/images/'</span>,  <span class="comment">//images目录地址</span></span><br><span class="line">            destPath: <span class="string">'./public/dist/'</span>  <span class="comment">//目标目录地址</span></span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// js文件合并与压缩</span></span><br><span class="line">        uglify: &#123;</span><br><span class="line">            compressjs: &#123;</span><br><span class="line">                files: &#123;</span><br><span class="line">                    <span class="string">'&lt;%= meta.destPath %&gt;base.min.js'</span>: [<span class="string">'&lt;%= meta.srcJsPath %&gt;zepto.min.js'</span>, <span class="string">'&lt;%= meta.srcJsPath %&gt;base.js'</span>]</span><br><span class="line">                   &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// sass编译与压缩</span></span><br><span class="line">        sass: &#123;</span><br><span class="line">            dist: &#123;</span><br><span class="line">                options: &#123;</span><br><span class="line">                    style: <span class="string">'compressed'</span>,</span><br><span class="line">                    sourcemap: <span class="string">'none'</span>  <span class="comment">//是否生成sass map</span></span><br><span class="line">                &#125;,</span><br><span class="line">                files: [</span><br><span class="line">                    &#123;<span class="string">'&lt;%= meta.destPath %&gt;style.min.css'</span>: <span class="string">'&lt;%= meta.srcSassPath %&gt;style.scss'</span>&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自动雪碧图</span></span><br><span class="line">        sprite: &#123;</span><br><span class="line">           options: &#123;</span><br><span class="line">               <span class="comment">// sprite背景图源文件夹，只有匹配此路径才会处理，默认 images/slice/</span></span><br><span class="line">               imagepath: <span class="string">'&lt;%= meta.srcImgPath %&gt;slice/'</span>,</span><br><span class="line">               <span class="comment">// 映射CSS中背景路径，支持函数和数组，默认为 null</span></span><br><span class="line">               imagepath_map: <span class="literal">null</span>,</span><br><span class="line">               <span class="comment">// 雪碧图输出目录，注意，会覆盖之前文件！默认 images/</span></span><br><span class="line">               spritedest: <span class="string">'&lt;%= meta.destPath %&gt;/images/'</span>,</span><br><span class="line">               <span class="comment">// 替换后的背景路径，默认 ../images/</span></span><br><span class="line">               spritepath: <span class="string">'../images/'</span>,</span><br><span class="line">               <span class="comment">// 各图片间间距，如果设置为奇数，会强制+1以保证生成的2x图片为偶数宽高，默认 0</span></span><br><span class="line">               padding: <span class="number">0</span>,</span><br><span class="line">               <span class="comment">// 是否使用 image-set 作为2x图片实现，默认不使用</span></span><br><span class="line">               useimageset: <span class="literal">false</span>,</span><br><span class="line">               <span class="comment">// 是否以时间戳为文件名生成新的雪碧图文件，如果启用请注意清理之前生成的文件，默认不生成新文件</span></span><br><span class="line">               newsprite: <span class="literal">false</span>,</span><br><span class="line">               <span class="comment">// 给雪碧图追加时间戳，默认不追加</span></span><br><span class="line">               spritestamp: <span class="literal">false</span>,</span><br><span class="line">               <span class="comment">// 在CSS文件末尾追加时间戳，默认不追加</span></span><br><span class="line">               cssstamp: <span class="literal">true</span>,</span><br><span class="line">               <span class="comment">// 默认使用二叉树最优排列算法</span></span><br><span class="line">               algorithm: <span class="string">'binary-tree'</span>,</span><br><span class="line">               <span class="comment">// 默认使用`pixelsmith`图像处理引擎</span></span><br><span class="line">               engine: <span class="string">'pixelsmith'</span></span><br><span class="line">           &#125;,</span><br><span class="line">           autoSprite: &#123;</span><br><span class="line">               files: [&#123;</span><br><span class="line">                   <span class="comment">// 启用动态扩展</span></span><br><span class="line">                   expand: <span class="literal">true</span>,</span><br><span class="line">                   <span class="comment">// css文件源的文件夹</span></span><br><span class="line">                   cwd: <span class="string">'&lt;%= meta.destPath %&gt;'</span>,</span><br><span class="line">                   <span class="comment">// 匹配规则</span></span><br><span class="line">                   src: <span class="string">'*.css'</span>,</span><br><span class="line">                   <span class="comment">// 导出css和sprite的路径地址</span></span><br><span class="line">                   dist: <span class="string">'&lt;%= meta.destPath %&gt;css/'</span>,</span><br><span class="line">                   <span class="comment">// 导出的css名</span></span><br><span class="line">                   ext: <span class="string">'.sprite.css'</span></span><br><span class="line">               &#125;]</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监听文件变化, 自动编译</span></span><br><span class="line">        watch: &#123;</span><br><span class="line">            build: &#123;</span><br><span class="line">                files: [</span><br><span class="line">                    <span class="string">'&lt;%= meta.srcJsPath %&gt;*.js'</span>, <span class="string">'&lt;%= meta.srcSassPath %&gt;*.scss'</span></span><br><span class="line">                ],</span><br><span class="line">                tasks: [<span class="string">'uglify'</span>, <span class="string">'sass'</span>, <span class="string">'sprite'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加任务依赖</span></span><br><span class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</span><br><span class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-sass'</span>);</span><br><span class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-watch'</span>);</span><br><span class="line">    grunt.loadNpmTasks(<span class="string">'grunt-css-sprite'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认被执行的任务列表。</span></span><br><span class="line">    grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'uglify'</span>, <span class="string">'sass'</span>, <span class="string">'sprite'</span>, <span class="string">'watch'</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>类似的文件目录结构</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── public/</span><br><span class="line">│   ├── dist/                   <span class="comment"># build files</span></span><br><span class="line">│   │   └── <span class="string">...</span></span><br><span class="line">│   ├── css/                    <span class="comment"># scss files</span></span><br><span class="line">│   │   └── <span class="string">...</span></span><br><span class="line">│   ├── js/                     <span class="comment"># js files  </span></span><br><span class="line">│   │   └── <span class="string">...</span></span><br><span class="line">│   └── images/                 <span class="comment"># images files</span></span><br><span class="line">│       └── <span class="string">...</span></span><br><span class="line">├── Gruntfile.js/               <span class="comment"># grunt setting</span></span><br><span class="line">├── index.html                  <span class="comment"># index.html template</span></span><br><span class="line">├── package.json                <span class="comment"># build scripts and dependencies</span></span><br><span class="line">└── <span class="string">...</span>                         <span class="comment"># others</span></span><br></pre></td></tr></table></figure></li></ul><p>阅读参考:</p><ul><li><a href></a></li></ul>]]></content>
    
    
    <summary type="html">如何使用grunt来处理前端代码</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="node" scheme="https://blog.oulafen.com/tags/node/"/>
    
    <category term="构建工具" scheme="https://blog.oulafen.com/tags/构建工具/"/>
    
  </entry>
  
  <entry>
    <title>nodejs之不可或缺的forever模块</title>
    <link href="https://blog.oulafen.com/2016/06/03/node-forever/"/>
    <id>https://blog.oulafen.com/2016/06/03/node-forever/</id>
    <published>2016-06-03T13:00:29.000Z</published>
    <updated>2021-10-22T17:10:32.684Z</updated>
    
    <content type="html"><![CDATA[<p>官方说明<br>A simple CLI tool for ensuring that a given script runs continuously (i.e. forever).<br>一个用来持续运行一个给定脚本的简单的命令行工具<br>Github地址: <a href="https://github.com/nodejitsu/forever" target="_blank" rel="noopener">https://github.com/nodejitsu/forever</a><br><a id="more"></a></p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>forever的用途就是帮我们更好的管理我们的node App服务,本质上就是在forever进程之下,创建一个node app的子进程,保证我们的服务能持续运行,帮我们自动重启服务而不需要手动重启.</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>forever 必须在全局环境下安装<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm <span class="keyword">install</span> forever -g</span><br></pre></td></tr></table></figure></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><p>启动</p>  <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">forever</span> <span class="built_in">start</span> app.js</span><br></pre></td></tr></table></figure></li><li><p>指定forever信息输出文件(默认它会放到<code>~/.forever/forever.log</code>)</p> <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">forever</span> <span class="built_in">start</span> -l <span class="keyword">forever</span>.<span class="built_in">log</span> app.js</span><br></pre></td></tr></table></figure></li><li><p>指定app.js中的日志信息和错误日志输出文件</p> <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  -o 就是console.log输出的信息，</span></span><br><span class="line"><span class="comment">//  -e 就是console.error输出的信息</span></span><br><span class="line">forever start -o <span class="keyword">out</span>.<span class="keyword">log</span> -<span class="keyword">e</span> <span class="keyword">err</span>.<span class="keyword">log</span> <span class="keyword">app</span>.js</span><br></pre></td></tr></table></figure></li><li><p>追加日志，forever默认是不能覆盖上次的启动日志, 所以如果第二次启动不加-a，则会不让运行</p>  <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">forever</span> <span class="built_in">start</span> -l <span class="keyword">forever</span>.<span class="built_in">log</span> -<span class="keyword">a</span> app.js</span><br></pre></td></tr></table></figure></li><li><p>监听当前文件夹下的所有文件改动</p>  <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">forever</span> <span class="built_in">start</span> -w app.js</span><br></pre></td></tr></table></figure></li><li><p>显示所有运行的服务</p>  <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forever <span class="built_in">list</span></span><br></pre></td></tr></table></figure><p>  输出如下</p>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@oura ~]# forever list</span><br><span class="line">info:    Forever processes running</span><br><span class="line">data:        uid  command            <span class="built_in"> script </span> forever pid   id logfile                 uptime       </span><br><span class="line">data:    [0] qnwC /usr/local/bin/node bin/www 26102   26321    /root/.forever/qnwC.log 0:1:26:10.30</span><br></pre></td></tr></table></figure></li><li><p>停止守护进程</p>  <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">forever</span> <span class="built_in">stop</span> app.js</span><br><span class="line">//或者</span><br><span class="line"><span class="keyword">forever</span> <span class="built_in">stop</span> [uid]</span><br><span class="line">//[uid]就是<span class="keyword">forever</span> list对应查询到的启动服务里的uid(如上面的 qnwC )</span><br></pre></td></tr></table></figure></li><li><p>停止所有守护进程</p>  <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">forever stopall</span></span><br></pre></td></tr></table></figure></li><li><p>重启某一个服务</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">forever</span> <span class="selector-tag">restart</span> <span class="selector-tag">app</span><span class="selector-class">.js</span></span><br></pre></td></tr></table></figure></li><li><p>重启所有服务</p>  <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">forever restartall</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="常见参数配置"><a href="#常见参数配置" class="headerlink" title="常见参数配置"></a>常见参数配置</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-m <span class="string">MAX:</span> 运行指定脚本的次数</span><br><span class="line">-l <span class="string">LOGFILE:</span> 输出日志到LOGFILE</span><br><span class="line">-o <span class="string">OUTFILE:</span> 输出控制台信息到OUTFILE</span><br><span class="line">-e <span class="string">ERRFILE:</span> 输出控制台错误在ERRFILE</span><br><span class="line">-p <span class="string">PATH:</span> 根目录</span><br><span class="line">-c <span class="string">COMMAND:</span> 执行命令，默认是node</span><br><span class="line">-a, –<span class="string">append:</span> 合并日志</span><br><span class="line">-f, –<span class="string">fifo:</span> 流式日志输出</span><br><span class="line">-n, –<span class="string">number:</span> 日志打印行数</span><br><span class="line">–<span class="string">pidFile:</span> pid文件</span><br><span class="line">–<span class="string">sourceDir:</span> 源代码目录</span><br><span class="line">–<span class="string">minUptime:</span> 最小spinn更新时间(ms)</span><br><span class="line">–<span class="string">spinSleepTime:</span> 两次spin间隔时间</span><br><span class="line">–<span class="string">colors:</span> 控制台输出着色</span><br><span class="line">–<span class="string">plain:</span> –no-colors的别名，控制台输出无色</span><br><span class="line">-d, –<span class="string">debug:</span> debug模式</span><br><span class="line">-v, –<span class="string">verbose:</span> 打印详细输出</span><br><span class="line">-s, –<span class="string">silent:</span> 不打印日志和错误信息</span><br><span class="line">-w, –<span class="string">watch:</span> 监控文件改变</span><br><span class="line">–<span class="string">watchDirectory:</span> 监控顶级目录</span><br><span class="line">–<span class="string">watchIgnore:</span> 通过模式匹配忽略监控</span><br><span class="line">-h, –<span class="string">help:</span> 命令行帮助信息</span><br></pre></td></tr></table></figure><h2 id="forever-利用别名启动-node-服务"><a href="#forever-利用别名启动-node-服务" class="headerlink" title="forever 利用别名启动 node 服务"></a>forever 利用别名启动 node 服务</h2><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>当我们所在的测试环境部署了好几个应用,前面用 nginx 做反向代理.<br>而我们的 node.js 服务器启动文件一般都喜欢用 app.js 或者 index.js.</p><p>那么问题就快要出现了.<br>当如下所示, 有多个同名的启动文件, 并想要去掉其中的某一个node服务时,怎么办?<br>执行<code>forever stop app.js</code>? 这样只会全部关掉,死无全尸.<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@oura ~]<span class="meta"># forever list</span></span><br><span class="line"><span class="symbol">info:</span>    Forever processes running</span><br><span class="line"><span class="symbol">data:</span>        uid    command             script     forever pid  logfile                   uptime</span><br><span class="line"><span class="symbol">data:</span>    [<span class="number">0</span>] <span class="number">0</span>D4G   <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/bin/</span>node app.js   <span class="number">537</span>     <span class="number">3099</span> <span class="meta-keyword">/root/</span>.forever/a.log   <span class="number">3</span>:<span class="number">21</span>:<span class="number">28</span>:<span class="number">21.634</span></span><br><span class="line"><span class="symbol">data:</span>    [<span class="number">1</span>] FT5X   <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/bin/</span>node app.js <span class="number">1898</span>    <span class="number">1902</span> <span class="meta-keyword">/root/</span>.forever/b.log   <span class="number">90</span>:<span class="number">15</span>:<span class="number">23</span>:<span class="number">19.11</span></span><br><span class="line"><span class="symbol">data:</span>    [<span class="number">2</span>] Cr8D   <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/bin/</span>node app.js     <span class="number">2288</span>    <span class="number">4915</span> <span class="meta-keyword">/root/</span>.forever/c.log   <span class="number">2</span>:<span class="number">10</span>:<span class="number">2</span>:<span class="number">58.797</span></span><br><span class="line"><span class="symbol">data:</span>    [<span class="number">3</span>] itbilu <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/bin/</span>node app.js <span class="number">6893</span>    <span class="number">6895</span> <span class="meta-keyword">/root/</span>.forever/d.log <span class="number">61</span>:<span class="number">21</span>:<span class="number">5</span>:<span class="number">36.54</span></span><br></pre></td></tr></table></figure></p><p>遇到如上的情况时最好的解决办法就是给每个服务起个独一无二的别名 (别名-其实就是linux下的一个软链接, 也就是给启动文件设置一个软链接).</p><p>下面所示的软链接会按数字顺序排列,我们在生产环境中,最好起名和业务相关,便于一眼识别.<br>进入node服务1目录<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s ./app.js node_noe</span><br></pre></td></tr></table></figure></p><p>这时在目录下回多出来一个 软链接 node_noe ,然后用 forever 启动它<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">forever</span> <span class="built_in">start</span> node_noe</span><br></pre></td></tr></table></figure></p><p>依次进入 node 服务2目录 …..设置完后启动,最后你的 forever list 是这样的:<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@oura ~]<span class="meta"># forever list</span></span><br><span class="line"><span class="symbol">info:</span>    Forever processes running</span><br><span class="line"><span class="symbol">data:</span>        uid    command             script     forever pid  logfile                   uptime</span><br><span class="line"><span class="symbol">data:</span>    [<span class="number">0</span>] <span class="number">0</span>D4G   <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/bin/</span>node node_one   <span class="number">537</span>     <span class="number">3099</span> <span class="meta-keyword">/root/</span>.forever/a.log   <span class="number">3</span>:<span class="number">21</span>:<span class="number">28</span>:<span class="number">21.634</span></span><br><span class="line"><span class="symbol">data:</span>    [<span class="number">1</span>] FT5X   <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/bin/</span>node node_two <span class="number">1898</span>    <span class="number">1902</span> <span class="meta-keyword">/root/</span>.forever/b.log   <span class="number">90</span>:<span class="number">15</span>:<span class="number">23</span>:<span class="number">19.11</span></span><br><span class="line"><span class="symbol">data:</span>    [<span class="number">2</span>] Cr8D   <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/bin/</span>node node_three     <span class="number">2288</span>    <span class="number">4915</span> <span class="meta-keyword">/root/</span>.forever/c.log   <span class="number">2</span>:<span class="number">10</span>:<span class="number">2</span>:<span class="number">58.797</span></span><br><span class="line"><span class="symbol">data:</span>    [<span class="number">3</span>] itbilu <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/bin/</span>node node_four    <span class="number">6895</span> <span class="meta-keyword">/root/</span>.forever/d.log <span class="number">61</span>:<span class="number">21</span>:<span class="number">5</span>:<span class="number">36.54</span></span><br></pre></td></tr></table></figure></p><p>这时Leader 再让我们去停止某个业务的 node 服务时,就不必手慌脚乱了.<br>通过别名一眼识别针对的是哪个服务.然后<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">forever</span> <span class="built_in">stop</span> node_one</span><br></pre></td></tr></table></figure></p><p>这样就万事大吉了, O(∩_∩)O哈哈~</p>]]></content>
    
    
    <summary type="html">nodejs 之不可或缺的 forever 模块</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="node" scheme="https://blog.oulafen.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>centos服务器nodejs相关环境搭建</title>
    <link href="https://blog.oulafen.com/2016/06/03/node-centos/"/>
    <id>https://blog.oulafen.com/2016/06/03/node-centos/</id>
    <published>2016-06-03T12:00:29.000Z</published>
    <updated>2021-10-22T17:10:32.685Z</updated>
    
    <content type="html"><![CDATA[<p>此文记录在 centos服务器上部署nodejs环境的安装及配置步骤.<br><a id="more"></a></p><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><ul><li><p>准备：</p>  <figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">yum</span> <span class="literal">-</span><span class="comment">y</span> <span class="comment">install</span> <span class="comment">gcc</span> <span class="comment">make</span> <span class="comment">gcc</span><span class="literal">-</span><span class="comment">c</span>++ <span class="comment">openssl</span><span class="literal">-</span><span class="comment">devel</span> <span class="comment">wget</span></span><br></pre></td></tr></table></figure></li><li><p>下载源码及解压</p>  <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://nodejs.org/dist/v0.<span class="number">10.26</span>/<span class="keyword">node</span><span class="title">-v0</span>.<span class="number">10.26</span>.tar.gz</span><br><span class="line">tar -zvxf <span class="keyword">node</span><span class="title">-v0</span>.<span class="number">10.26</span>.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>编译及安装</p>  <figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span> &amp;&amp; <span class="built_in">make</span> install</span><br></pre></td></tr></table></figure></li><li><p>验证是否安装配置成功</p>  <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">-v</span> &amp;&amp; npm -v</span><br></pre></td></tr></table></figure></li></ul><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><ul><li><p>安装依赖包：</p>  <figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install <span class="literal">zlib</span>-devel curl-devel openssl-devel perl cpio expat-devel gettext-devel openssl <span class="literal">zlib</span> autoconf tk perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure></li><li><p>获取最新版 Git 源码包<br>  从 <a href="https://github.com/git/git/releases" target="_blank" rel="noopener">https://github.com/git/git/releases</a> 下载最新版的 zip 包或者 tar.gz 并解压：<br>  以 tar.gz 格式为例（在网页的 tar.gz 上右键复制下载链接即可）：</p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/git/gi</span>t<span class="regexp">/archive/</span>v2.<span class="number">4.0</span>.tar.gz</span><br><span class="line">tar zxvf v2.<span class="number">4.0</span>.tar.gz</span><br></pre></td></tr></table></figure><p>  会得到一个 git-2.4.0 的目录（版本号与下载的一致），然后进入这个目录<code>cd git-2.4.0</code>:<br>  编译安装</p>  <figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">autoconf</span><br><span class="line">./configure</span><br><span class="line"><span class="built_in">make</span></span><br><span class="line"><span class="built_in">make</span> install</span><br></pre></td></tr></table></figure><p>  以上4步请一步步来，以免出现错误不好找原因。<br>  然后修改 <code>/etc/ld.so.conf</code> 文件，在最后加入一行：</p>  <figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/<span class="class"><span class="keyword">lib</span></span></span><br></pre></td></tr></table></figure><p>  保存并关闭。<br>  这就安装好了，看看版本：</p>  <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="comment">--version</span></span><br><span class="line"><span class="comment"># git version 2.4.0</span></span><br></pre></td></tr></table></figure></li><li><p>错误处理<br>  如果安装后报以下错误：</p>  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">bash:</span> <span class="regexp">/usr/</span>bin/<span class="string">git:</span> 没有那个文件或目录</span><br></pre></td></tr></table></figure><p>  那么请编辑 <code>/etc/profile</code> 在最后加入一行：</p>  <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=<span class="variable">$PATH</span><span class="symbol">:/usr/local/bin</span></span><br></pre></td></tr></table></figure><p>  然后重新开窗口，或者执行命令 <code>source /etc/profile</code> 后就好了。</p><p>  查看系统版本</p>  <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cat /etc/<span class="keyword">system</span>-release</span><br></pre></td></tr></table></figure></li></ul><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><ul><li><p>第一步，在<code>/etc/yum.repos.d/</code>目录下创建一个源配置文件<code>nginx.repo</code>：</p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/etc/yum</span>.repos.d<span class="regexp">/nginx.repo</span></span><br></pre></td></tr></table></figure><p>  填写如下内容：</p>  <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[nginx]</span></span><br><span class="line"><span class="attr">name</span>=nginx repo</span><br><span class="line"><span class="attr">baseurl</span>=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>  保存并退出；</p></li><li><p>执行如下指令进行安装：</p>  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> nginx</span><br></pre></td></tr></table></figure><p>  安装完成，启动Nginx：</p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d<span class="regexp">/nginx start</span></span><br></pre></td></tr></table></figure><p>  如果还无法访问，则需配置一下Linux防火墙。</p>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT 5 -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">service iptables save</span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure></li><li><p>Nginx的命令以及配置文件位置：</p>  <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta-keyword">/etc/</span>init.d/nginx start    <span class="meta">#启动nginx服务</span></span><br><span class="line"><span class="meta-keyword">/etc/</span>init.d/nginx stop<span class="meta">#停止nginx服务</span></span><br><span class="line"><span class="meta-keyword">/etc/</span>init.d/nginx restart<span class="meta">#重启nginx服务</span></span><br><span class="line"><span class="meta-keyword">/etc/</span>nginx/nginx.conf   <span class="meta">#nginx配置文件位置</span></span><br><span class="line">chkconfig nginx on  <span class="meta">#设为开机启动</span></span><br></pre></td></tr></table></figure>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service nginx start</span><br><span class="line">service nginx stop</span><br><span class="line">service nginx restart</span><br></pre></td></tr></table></figure></li><li><p>关于nginx的配置，可参考：<br>  Centos下Nginx安装与配置<a href="http://www.jianshu.com/p/d5114a2a2052" target="_blank" rel="noopener">http://www.jianshu.com/p/d5114a2a2052</a><br>  Nginx同一端口根据不同域名转发到不同端口<a href="http://my.oschina.net/wangt10/blog/630531?fromerr=So7zDfGn" target="_blank" rel="noopener">http://my.oschina.net/wangt10/blog/630531?fromerr=So7zDfGn</a> </p></li></ul>]]></content>
    
    
    <summary type="html">centos服务器nodejs相关环境搭建</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="node" scheme="https://blog.oulafen.com/tags/node/"/>
    
    <category term="环境" scheme="https://blog.oulafen.com/tags/环境/"/>
    
  </entry>
  
  <entry>
    <title>移动端h5技巧总结</title>
    <link href="https://blog.oulafen.com/2016/05/03/frontend-mobile-h5-skills/"/>
    <id>https://blog.oulafen.com/2016/05/03/frontend-mobile-h5-skills/</id>
    <published>2016-05-03T05:03:32.000Z</published>
    <updated>2021-10-22T17:07:18.224Z</updated>
    
    <content type="html"><![CDATA[<p>虽说目前有很多移动端的框架, 但对于一些小项目来说, 未免会有些重, 那手写移动端网站时都有哪些技巧与必备的常识呢? 现总结如下:<br><a id="more"></a></p><h2 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h2><ul><li><p>添加viewport标签</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>  详细属性:</p>  <figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">width</span>  ----  viewport的宽度（<span class="built_in">width</span>=device-<span class="built_in">width</span>意思是：宽度等于设备宽度）</span><br><span class="line"><span class="built_in">height</span> ------  viewport的高度（<span class="built_in">height</span>=device-<span class="built_in">height</span>意思是：高度等于设备宽度）</span><br><span class="line">initial-<span class="built_in">scale</span> ----- 初始的缩放比例</span><br><span class="line">minimum-<span class="built_in">scale</span> ----- 允许用户缩放到的最小比例</span><br><span class="line">maximum-<span class="built_in">scale</span> ----- 允许用户缩放到的最大比例</span><br><span class="line">user-scalable ----- 用户是否可以手动缩放</span><br></pre></td></tr></table></figure></li><li><p>禁止将数字变为电话号码</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>  一般情况下，IOS和Android系统都会默认某长度内的数字为电话号码，即使不加也是会默认显示为电话的，so，取消这个很有必要！</p></li><li><p>iphone设备中的safari私有meta标签</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>  它表示：允许全屏模式浏览，隐藏浏览器导航栏</p></li><li><p>iphone的私有标签</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  它指定的iphone中safari顶端的状态条的样式<br>  默认值为default（白色），可以定为black（黑色）和black-translucent（灰色半透明）</p></li><li><p>另外还有一个个性化的link标签，它支持用户将网页创建快捷方式到桌面时，其图标变为我们自己定义的图标。比如手机腾讯网上的标签：</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">href</span>=<span class="string">"http://3gimg.qq.com/wap30/info/info5/img/logo_icon.png"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  不过腾讯对这个png图标的命名并不规范，常规我们要求文件名应为 apple-touch-icon.png 或 apple-touch-icon-precomposed.png ，前者的命名iOS会为这个图标自动添加圆角、阴影和高亮覆盖层，后者则不会添加这些效果。</p></li></ul><h2 id="rem神器"><a href="#rem神器" class="headerlink" title="rem神器"></a>rem神器</h2><p>关于rem的详解请<a href="http://oulafen.github.io/2016/05/03/frontend-rem/" target="_blank" rel="noopener">戳这里</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据屏幕大小计算根font-size, 实现全适配</span></span><br><span class="line">&lt;script&gt;        </span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">doc, win</span>) </span>&#123;    </span><br><span class="line">        <span class="keyword">var</span> docEl = doc.documentElement,    </span><br><span class="line">        resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,    </span><br><span class="line">        recalc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;    </span><br><span class="line">        <span class="keyword">var</span> clientWidth = docEl.clientWidth;    </span><br><span class="line">        <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;    </span><br><span class="line">        docEl.style.fontSize = <span class="number">20</span> * (clientWidth / <span class="number">320</span>) + <span class="string">'px'</span>;    </span><br><span class="line">    &#125;;    </span><br><span class="line">    <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;    </span><br><span class="line">    win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>);    </span><br><span class="line">    doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>);    </span><br><span class="line">    &#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);    </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="手机网站框架代码"><a href="#手机网站框架代码" class="headerlink" title="手机网站框架代码"></a>手机网站框架代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>手机网站<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"oulafen, oulafen.com"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span>&#123;<span class="attribute">font-size</span>:<span class="number">62.5%</span>;<span class="attribute">font-family</span>:<span class="string">"Microsoft YaHei"</span>,Arial; <span class="attribute">overflow-x</span>:hidden; <span class="attribute">overflow-y</span>:auto;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        大家好！我是oulafen！</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    (<span class="function"><span class="keyword">function</span> <span class="params">(doc, win)</span> </span>&#123;    </span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> docEl = doc.documentElement,    </span></span><br><span class="line"><span class="javascript">        resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,    </span></span><br><span class="line"><span class="actionscript">        recalc = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;    </span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> clientWidth = docEl.clientWidth;    </span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;    </span></span><br><span class="line"><span class="actionscript">        docEl.style.fontSize = <span class="number">20</span> * (clientWidth / <span class="number">320</span>) + <span class="string">'px'</span>;    </span></span><br><span class="line">    &#125;;    </span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;    </span></span><br><span class="line"><span class="actionscript">    win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>);    </span></span><br><span class="line"><span class="actionscript">    doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>);    </span></span><br><span class="line"><span class="javascript">    &#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);  </span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="手机端的调试"><a href="#手机端的调试" class="headerlink" title="手机端的调试"></a>手机端的调试</h2><p>一般我们采用的：在浏览器调试+真机测试，因为浏览器毕竟只是一个模拟工具，实际开发的话，我们还得用真机去测试。</p><p>而在浏览器上测试，可以chrome（谷歌浏览器）的开发者工具：有个手机样的小图标，点击就能模拟手机测试。</p><p>持续更新中…</p>]]></content>
    
    
    <summary type="html">移动端h5技巧总结</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="前端" scheme="https://blog.oulafen.com/tags/前端/"/>
    
  </entry>
  
  <entry>
    <title>关于rem</title>
    <link href="https://blog.oulafen.com/2016/05/03/frontend-rem/"/>
    <id>https://blog.oulafen.com/2016/05/03/frontend-rem/</id>
    <published>2016-05-03T02:31:32.000Z</published>
    <updated>2021-10-22T17:08:51.394Z</updated>
    
    <content type="html"><![CDATA[<p>随着web app的兴起，rem这是个低调的css单位，近一两年开始崭露头角，有许多朋友对于它的评价不一，有的在尝试使用，有的在使用过程中遇到坑就弃用了。但是我认为rem是用来做web app它绝对是最合适的人选之一。<br>–引自”段亮博客”<br><a id="more"></a></p><h2 id="rem是什么？"><a href="#rem是什么？" class="headerlink" title="rem是什么？"></a>rem是什么？</h2><p><code>rem</code>（font size of the root element）是指相对于根元素的字体大小的单位。<br>简单的说它就是一个相对单位。看到rem大家一定会想起em单位，<code>em</code>（font size of the element）是指相对于父元素的字体大小的单位。<br>区别：它们之间其实很相似，只不过一个计算的规则是依赖根元素一个是依赖父元素计算。</p><h2 id="为什么web-app要使用rem？"><a href="#为什么web-app要使用rem？" class="headerlink" title="为什么web app要使用rem？"></a>为什么web app要使用rem？</h2><p>传统的解决方式的利弊:</p><ul><li>流式布局(例如携程/亚马逊)<br>  他们在页面布局的时候都是通过百分比来定义宽度，但是高度大都是用px来固定住，所以在大屏幕的手机下显示效果会变成有些页面元素宽度被拉的很长，但是高度还是和原来一样，实际显示非常的不协调，这就是流式布局的最致命的缺点，往往只有几个尺寸的手机下看到的效果是令人满意的，其实很多视觉设计师应该无法接受这种效果，因为他们的设计图在大屏幕手机下看到的效果相当于是被横向拉长来一样。<br>  流式布局并不是最理想的实现方式，通过大量的百分比布局，会经常出现许多兼容性的问题，还有就是对设计有很多的限制，因为他们在设计之初就需要考虑流式布局对元素造成的影响，只能设计横向拉伸的元素布局，设计的时候存在很多局限性。</li><li>固定宽度做法<br>  还有一种是固定页面宽度的做法，早期有些网站把页面设置成320的宽度，超出部分留白，这样做视觉，前端都挺开心，视觉在也不用被流式布局限制自己的设计灵感了，前端也不用在搞坑爹的流式布局。但是这种解决方案也是存在一些问题，例如在大屏幕手机下两边是留白的，还有一个就是大屏幕手机下看起来页面会特别小，操作的按钮也很小，手机淘宝首页起初是这么做的，但近期改版了，采用了rem。</li><li>响应式做法<br>  响应式这种方式在国内很少有大型企业的复杂性的网站在移动端用这种方法去做，主要原因是工作大，维护性难，所以一般都是中小型的门户或者博客类站点会采用响应式的方法从web page到web app直接一步到位，因为这样反而可以节约成本，不用再专门为自己的网站做一个web app的版本。</li><li>设置viewport进行缩放<br>  天猫的web app的首页就是采用这种方式去做的，以320宽度为基准，进行缩放，最大缩放为320*1.3 = 416，基本缩放到416都就可以兼容iphone6 plus的屏幕了，这个方法简单粗暴，又高效。说实话我觉得他和用接下去我们要讲的rem都非常高效，不过有部分同学使用过程中反应缩放会导致有些页面元素会糊的情况。  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=320,maximum-scale=1.3,user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>上面讲了一大堆目前大部分公司主流的一些web app的适配解决方案，接下来讲下rem是如何工作的。<br>前面我们说过rem是通过根元素进行适配的，网页中的根元素指的是html我们通过设置html的字体大小就可以控制rem的大小。举个例子：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">6rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">3rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">3rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#06c</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: .<span class="number">5rem</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>把html设置成10px是为了方便我们计算，为什么6rem等于60px。如果这个时候我们的.btn的样式不变，我们再改变html的font-size的值，看看按钮发生上面变化:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>按钮大小对比:<br><img src="http://statics.oulafen.com/blog-frontend-rem-1.jpg" style="max-width:100%; margin: auto;"><br>其实从上面两个案例中我们就可以计算出1px多少rem:<br>第一个例子：<br>    120px = 6rem <em> 20px(根元素设置大值)<br>第二个例子：<br>    240px = 6rem </em> 40px(根元素设置大值)<br>推算出：<br>    10px  = 1rem 在根元素（font-size = 10px的时候）；<br>    20px  = 1rem 在根元素（font-size = 20px的时候）；<br>    40px  = 1rem 在根元素（font-size = 40px的时候）；<br>在上面两个例子中我们发现第一个案例按钮是等比例放大到第二个按钮，html font-size的改变就会导致按钮的大小发生改变，我们并不需要改变先前给按钮设置的宽度和高度，其实这就是我们最想看到的，为什么这么说？接下来我们再来看一个例子：<a href="http://oulafen.github.io/test-rem-phone" target="_blank" rel="noopener">戳这里查看</a><br>由上面两个的demo中我们知道改变html的font-size可以等比改变所有用了rem单位的元素，所以大家可以通过chrome浏览器的调试工具去切换第三个的demo在不同设备下的展示效果，或者通过缩放浏览器的宽度来查看效果，我们可以看到不管在任何分辨率下，页面的排版都是按照等比例进行切换，并且布局没有乱。</p><h2 id="怎么计算不同分辨率下font-size的值"><a href="#怎么计算不同分辨率下font-size的值" class="headerlink" title="怎么计算不同分辨率下font-size的值?"></a>怎么计算不同分辨率下font-size的值?</h2><p>先看个表格<br><img src="http://statics.oulafen.com/blog-frontend-rem-2.jpeg" style="max-width:100%; margin: auto;"><br>上面的表格蓝色一列是上面案列中页面的尺寸，页面是以640的宽度去切的，怎么计算不同宽度下font-site的值，大家看表格上面的数值变化应该能明白。举个例子：384/640 = 0.6，384是640的0.6倍，所以384页面宽度下的font-size也等于它的0.6倍，这时384的font-size就等于12px。在不同设备的宽度计算方式以此类推。<br>那么回到技术上, 我们可以有两种方式来应用rem适配不同的设备</p><p>一是通过media query设置实现适配, 当然,这样是不能所有设备全适配<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size </span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">401px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">25px</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">428px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">26.75px</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">481px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">30px</span> <span class="meta">!important</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">569px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">35px</span> <span class="meta">!important</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">641px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">40px</span> <span class="meta">!important</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一是使用JS(可以实现全适配,推荐使用)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;        </span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">doc, win</span>) </span>&#123;    </span><br><span class="line">        <span class="keyword">var</span> docEl = doc.documentElement,    </span><br><span class="line">        resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,    </span><br><span class="line">        recalc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;    </span><br><span class="line">        <span class="keyword">var</span> clientWidth = docEl.clientWidth;    </span><br><span class="line">        <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;    </span><br><span class="line">        docEl.style.fontSize = <span class="number">20</span> * (clientWidth / <span class="number">375</span>) + <span class="string">'px'</span>;</span><br><span class="line">    &#125;;    </span><br><span class="line">    <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;    </span><br><span class="line">    win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>);    </span><br><span class="line">    doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>);    </span><br><span class="line">    &#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);    </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>此外，并不是所有的浏览都支持rem单位，不过还好在移动端除了opera 8以外的所有移动浏览器都支持rem单位值，更多详情，请移步caniuse.com，<a href="http://caniuse.com/#search=rem" target="_blank" rel="noopener">浏览器对rem支持情况</a></p><p><img src="http://statics.oulafen.com/blog-frontend-rem-support.jpg" style="max-width:100%; margin:auto;"></p>]]></content>
    
    
    <summary type="html">前端rem详解</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="前端" scheme="https://blog.oulafen.com/tags/前端/"/>
    
  </entry>
  
  <entry>
    <title>mac 锁屏快捷键设置</title>
    <link href="https://blog.oulafen.com/2016/04/27/mac-sock-screen-setting/"/>
    <id>https://blog.oulafen.com/2016/04/27/mac-sock-screen-setting/</id>
    <published>2016-04-27T11:32:25.000Z</published>
    <updated>2021-10-22T17:10:37.923Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客记录了如何设置mac锁屏的快捷键。<br><a id="more"></a></p><p>如果用户要离开电脑一段时间，可以选择直接把笔记本直接合上。但是这样原先在跑的进程就会挂起或者结束，如果正在下载，那么下载就被暂停（有时还不能恢复），如果正在提供网络服务，那么因为网络断了，别人也连不上你的笔记本。锁屏可以解决这个问题，在Windows下用Win+L快捷键就锁屏了，但Mac OS X下一直没有默认的快捷键。</p><h2 id="设置屏保"><a href="#设置屏保" class="headerlink" title="设置屏保"></a>设置屏保</h2><p>在mac中锁屏其实就是启动屏幕保护程序,所以在设置快捷键之前先来设置下屏保吧.具体操作如下:<br>找到“系统偏好设置”下的“安全性与隐私”，在“通用”页里设置“进入睡眠或开始屏幕保护程序后立即要求输入密码”。如图所示<br><img src="http://statics.oulafen.com/mac-protect-screen.png" width="100%"></p><h2 id="设置快捷键"><a href="#设置快捷键" class="headerlink" title="设置快捷键"></a>设置快捷键</h2><ul><li>在“应用程序”里找到“Automator”。新建一个服务，在“实用工具”里找到“启动屏幕保护程序”，双击或者把此操作拖动到右边，并且选择“没有输入”和位于“任何应用程序”，如下图所示<br>  <img src="http://statics.oulafen.com/mac-automator.png" width="100%"><br>  <img src="http://statics.oulafen.com/mac-automator-sock.png" width="100%"></li><li>然后按<code>cmd + s</code>保存为自己定义的名字</li><li>最后在“系统偏好设置”里找到“键盘”，为刚才定义的服务配置快捷键，我设成了<code>cmd + ctrl + l</code>,如图所示<br>  <img src="http://statics.oulafen.com/mac-automator-shortcut.png" width="100%"></li></ul><p>参考: <a href="http://hints.macworld.com/article.php?story=20090831093941225" target="_blank" rel="noopener">Lock the screen via a keyboard shortcut</a></p>]]></content>
    
    
    <summary type="html">这篇博客将记录如何设置mac锁屏的快捷键。</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="mac" scheme="https://blog.oulafen.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Mac中搭建Apache+PHP+Mysql环境</title>
    <link href="https://blog.oulafen.com/2016/04/24/mac-apache-php-mysql/"/>
    <id>https://blog.oulafen.com/2016/04/24/mac-apache-php-mysql/</id>
    <published>2016-04-24T13:52:29.000Z</published>
    <updated>2021-10-22T17:10:32.682Z</updated>
    
    <content type="html"><![CDATA[<p>虽作为前端，web后端的知识也少不了啊，那就先从php开始开始吧。</p><p>首先是环境的配置，在mac OS X系统中已集成了 Apache+PHP ，只需在命令行里设置一下就ok了，至于mySql，就得手动装一下，废话不多说，Let’s go.<br><a id="more"></a></p><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><h3 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h3><ul><li>启动 Apache： <code>sudo apachectl start</code></li><li>关闭 Apache： <code>sudo apachectl stop</code></li><li>重启 Apache： <code>sudo apachectl restart</code></li><li>查看 Apache 版本：<code>httpd -v</code></li></ul><h3 id="设置root目录："><a href="#设置root目录：" class="headerlink" title="设置root目录："></a>设置root目录：</h3><p>OS X 中默认有两个目录可以直接运行你的 Web 程序</p><ul><li>一个是系统级的 Web 根目录<ul><li>根目录及对应网址是<code>/Library/WebServer/Documents/</code>  <code>http://localhost</code></li></ul></li><li><p>一个是用户级的根目录(以用户名oulafen为例)</p><ul><li>根目录及对应网址是<code>~/Sites</code>  <code>http://localhost/~oulafen/</code> </li><li><code>~/Sites</code> 也就是用户目录下面的”站点”目录，在OS X 中，这个目录可能没有，所以需要手动建立一个同名目录。在终端运行<code>sudo mkdir ~/Sites</code>即可建立站点文件夹</li><li><p>建立站点文件夹后，检查 <code>/etc</code> 下是否有 <code>oulafen.conf</code> 这个文件，若没有则新键，并插入如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Directory</span> "/<span class="attr">Users</span>/<span class="attr">oulafen</span>/<span class="attr">Sites</span>/"&gt;</span></span><br><span class="line">    Options Indexes MultiViews</span><br><span class="line">    AllowOverride All</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line"><span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>文件保存之后，赋予读写权限 <code>sudo chmod 755 /etc/apache2/users/oulafen.conf</code></p></li><li>然后重启Apache，使该文件生效, <code>sudo apachectl restart</code></li><li>在<code>~/Sites</code>文件夹中放入测试网页，访问<code>http://localhost/~oulafen/</code> 试一下是否配置成功。</li></ul></li></ul><h3 id="更改根目录："><a href="#更改根目录：" class="headerlink" title="更改根目录："></a>更改根目录：</h3><ul><li>把<code>/etc/apache2/httpd.conf</code>文件里的 <code>/Library/WebServer/Documents/</code> 都替换成自己的路径，比如 <code>~/Sites</code></li><li>重启Apache，再次访问 <code>http://localhost</code>，即可显示修改后的文件路径中的内容。</li></ul><h3 id="配置虚拟主机："><a href="#配置虚拟主机：" class="headerlink" title="配置虚拟主机："></a>配置虚拟主机：</h3><ul><li><code>sudo vi /etc/apache2/httpd.conf</code>，</li><li>在 httpd.conf 中找到 <code>#Include /private/etc/apache2/extra/httpd-vhosts.conf</code> ，去掉前面的<code>#</code> ，重启Apache <code>sudo apachectl restart</code></li><li><p>配置虚拟主机文件 <code>httpd-vhost.conf</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi <span class="regexp">/etc/</span>apache2<span class="regexp">/extra/</span>httpd-vhosts.conf</span><br></pre></td></tr></table></figure><p>  在文件中加入类似如下代码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;VirtualHost *:80&gt;</span></span><br><span class="line">        <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> <span class="string">"/Users/oulafen/Sites"</span></span><br><span class="line">        <span class="attribute"><span class="nomarkup">ServerName</span></span> localhost</span><br><span class="line">        <span class="attribute">DirectoryIndex</span> index.php</span><br><span class="line">        <span class="section">&lt;Directory /&gt;</span></span><br><span class="line">            <span class="attribute"><span class="nomarkup">Options</span></span> Indexes FollowSymLinks</span><br><span class="line">            <span class="attribute">AllowOverride</span> None</span><br><span class="line">            <span class="attribute"><span class="nomarkup">Order</span></span> allow,deny</span><br><span class="line">            <span class="attribute"><span class="nomarkup">Allow</span></span> from <span class="literal">all</span></span><br><span class="line">        <span class="section">&lt;/Directory&gt;</span></span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br><span class="line"><span class="section">&lt;VirtualHost *:80&gt;</span></span><br><span class="line">        <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> <span class="string">"/Users/oulafen/Sites/mysite"</span>  ##项目根目录</span><br><span class="line">        <span class="attribute"><span class="nomarkup">ServerName</span></span> mysite.com              ##在本地访问的域名，最好不要与线上的冲突 </span><br><span class="line">        <span class="attribute">DirectoryIndex</span> index.php</span><br><span class="line">        <span class="section">&lt;Directory /&gt;</span></span><br><span class="line">            <span class="attribute"><span class="nomarkup">Options</span></span> Indexes FollowSymLinks</span><br><span class="line">            <span class="attribute">AllowOverride</span> None</span><br><span class="line">            <span class="attribute"><span class="nomarkup">Order</span></span> allow,deny</span><br><span class="line">            <span class="attribute"><span class="nomarkup">Allow</span></span> from <span class="literal">all</span></span><br><span class="line">        <span class="section">&lt;/Directory&gt;</span></span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure><p>  保存并退出后，重启Apache，访问 <code>http://localhost/mysite/</code> 或 <code>http://mysite.com</code> 查看效果。</p></li></ul><h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><p>OS X Mavericks 中已经集成了 PHP 5.4.30 版本，需要手动开启。</p><ul><li>可以用 vi 或者 nano 编辑器打开下面这个文件：<code>sudo nano /etc/apache2/httpd.conf</code> </li><li>然后按 <code>ctl+W</code> 进行查找，搜索<code>php</code>，第一条匹配的应该是下面这句代码：<code>LoadModule php5_module libexec/apache2/libphp5.so</code>,请将这句代码前面的<code>#</code>去掉，然后保存文件。</li><li>重启 Apache：<code>sudo apachectl restart</code></li><li>现在 PHP 应该已经开始工作了，你可以在用户级根目录下(~/Sites/)放一个PHP测试文件，代码如下：<code>&lt;?php phpinfo(); ?&gt;</code></li></ul><p>关于 <code>php.ini</code>:</p><ul><li>先复制一份 <code>php.ini</code>，<code>sudo cp /etc/php.ini.default /etc/php.ini</code></li><li>然后就可以通过<code>php.ini</code>来配置各种PHP功能了。<br>  例如修改 <code>upload_max_filesize</code>、<code>memory_limit</code>、<code>post_max_size</code>三项值，来调整PHP提交文件的最大值，比如<code>phpMyAdmin</code>中导入数据的最大值。</li></ul><h2 id="mySql"><a href="#mySql" class="headerlink" title="mySql"></a>mySql</h2><ul><li>OS X Mavericks 中并没有集成 Mysql，需要手动安装。可以点击 <a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">http://dev.mysql.com/downloads/mysql/</a> 去官网下载 MySQL 的安装包。建议下载稳定版。</li><li>安装。安装过程中会提示初始密码，切记要记住此密码。</li><li>安装成功后，从‘系统偏好设置 → 拉到最下边看到 MySQL → 点击进入可以看到MySQL状态’，最终让其保持在开启状态即可。</li><li>设置 <code>mysql</code>命令<ul><li><code>vi ~/.bash_profile</code></li><li>然后按字母 i 进入编辑模式，将下面的这句代码贴进去：<br>  <code>export PATH=&quot;/usr/local/mysql/bin:$PATH&quot;</code> </li><li>保存并退出</li><li>重新加载一下 Shell 以让上面的环境变量生效：<code>source ~/.bash_profile</code></li><li>之后你就可以在终端的任意目录使用 mysql 命令了，可运行 <code>mysql -v</code> 测试</li></ul></li><li>下载workbench 或 phpmyadmin安装，进行mysql的可视化操作。</li></ul><p>常见问题：</p><ul><li>2002 socket 错误<ul><li>杀掉mysql进程后再进行操作<br><code>sudo mkdir /var/mysql</code><br><code>sudo ln -s /tmp/mysql.sock /var/mysql/mysql.sock</code></li></ul></li></ul>]]></content>
    
    
    <summary type="html">在Mac中搭建Apache+PHP+Mysql环境</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="环境" scheme="https://blog.oulafen.com/tags/环境/"/>
    
  </entry>
  
  <entry>
    <title>mac 常用命令速查</title>
    <link href="https://blog.oulafen.com/2016/04/23/mac-commands/"/>
    <id>https://blog.oulafen.com/2016/04/23/mac-commands/</id>
    <published>2016-04-23T12:03:07.000Z</published>
    <updated>2021-10-22T17:10:32.684Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客将记录使用 mac 过程中常用的命令。<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>在图形界面下，用finder 打开 应用程序 -&gt; 实用程序 -&gt; 终端</p><ul><li><p>基本命令</p><ul><li>列出文件，<code>ls 参数 目录名</code>（参数 <code>-w</code> 显示中文，<code>-l</code> 详细信息， <code>-a</code> 包括隐藏文件 ）</li><li>转换目录，<code>cd</code></li><li>建立新目录，<code>mkdir 目录名</code></li><li>拷贝文件，<code>cp 参数 源文件 目标文件</code> (参数 <code>-R</code> 表示对目录进行递归操作)</li><li>删除文件，<code>rm 参数 文件</code> (参数 <code>-rf</code> 表示递归和强制，千万要小心使用，如果执行了 <code>rm -rf /</code> 你的系统就全没了)</li><li>移动文件，<code>mv 文件 目标目录</code></li><li>文本编辑，<code>nano 文件名</code> 或者 <code>vi 文件名</code></li></ul></li><li><p>目录操作</p><ul><li>创建一个目录，<code>mkdir</code>, 例：<code>mkdir dirname</code></li><li>删除一个目录, <code>rmdir</code>, 例：<code>rmdir dirname</code></li><li>移动或重命名一个目录, <code>mvdir</code>, 例：<code>mvdir dir1 dir2</code></li><li>显示当前目录的路径名, <code>pwd</code></li><li>显示当前目录的内容, <code>ls</code></li></ul></li><li><p>文件操作</p><ul><li>显示或连接文件，<code>cat</code>, 例：<code>cat filename</code></li><li>显示费文本文件的内容，<code>od</code>, 例：<code>od -c filename</code></li><li>删除文件或目录，<code>rm</code>, 例：<code>rm fileneme</code> <code>rm -rf dirname</code></li><li>改变文件名或所在目录, <code>mv</code>, 例：<code>mv file1 file2</code></li><li>使用匹配表达式查找文件， <code>find</code>, 例：<code>find . -name &quot;*.c&quot; -print</code></li><li>显示文件类型, <code>file</code>,例：<code>file filename</code></li></ul></li><li><p>选择操作</p><ul><li>显示文件的最初几行，<code>head</code>, 例：<code>head -20 filename</code></li><li>显示文件的最后几行, <code>tail</code>, 例：<code>tail -15 filename</code></li><li>显示文件每行中的某些域, <code>cut</code>, 例：<code>cut -f1,7 -d: /etc/passwd</code></li><li>从标准输入中删除若干列, <code>colrm</code>, 例：<code>colrm 8 20 file2</code></li><li>比较并显示两个文件的差异, <code>diff</code>, 例：<code>diff file1 file2</code></li><li>排序或归并文件, <code>sort</code>, 例：<code>sort -d -f -u file1</code></li><li>去掉文件中的重复行, <code>uniq</code>, 例：<code>uniq file1 file2</code></li><li>显示两有序文件的公共和非公共行, <code>comm</code>, 例：<code>comm file1 file2</code></li><li>统计文件的字符数、词数和行数, <code>wc</code>, 例：<code>wc filename</code></li><li>给文件加上行号, <code>nl</code>, 例：<code>nl file1 &gt;file2</code></li></ul></li><li><p>进程操作</p><ul><li>显示进程当前状态，<code>ps</code>,例：<code>ps u</code></li><li>终止进程，<code>kill</code>, 例：<code>kill -9 30142</code></li></ul></li><li><p>时间操作</p><ul><li>显示系统的当前日期和时间，<code>date</code></li><li>显示日历, <code>cal</code></li><li>统计程序的执行时间, <code>time</code>, 例：<code>time a.out</code></li></ul></li><li><p>网络与通信操作</p><ul><li>远程登录，<code>telnet</code>,例：<code>telnet hpc.sp.net.edu.cn</code></li><li>远程登录, <code>rlogin</code>,例：<code>rlogin hostname -l username</code></li><li>在远程主机执行指定命令, <code>rsh</code>, 例：<code>rsh f01n03 date</code></li><li>在本地主机与远程主机之间传输文件, <code>ftp</code>, 例：<code>ftp ftp.sp.net.edu.cn</code></li><li>在本地主机与远程主机之间复制文件, <code>rcp</code>, 例：<code>rcp file1 host1:file2</code></li><li>给一个网络主机发送回应请求, <code>ping</code>, 例：<code>ping hpc.sp.net.edu.cn</code></li><li>阅读和发送电子邮件, <code>mail</code>, 例：<code>mail</code></li><li>给另一用户发送报文, <code>write</code>, 例：<code>write username pts/1</code></li><li>允许或拒绝接收报文, <code>mesg</code>, 例：<code>mesg n</code></li></ul></li><li><p>Korn Shell 命令</p><ul><li>列出最近执行过的几条命令及编号, <code>history</code></li><li>重复执行最近执行过的某条命令, <code>r</code>, 例：<code>r -2</code></li><li>给某个命令定义别名, <code>alias</code>, 例：<code>alias del=rm -i</code></li><li>取消对某个别名的定义, <code>unalias</code>, 例：<code>unalias del</code></li></ul></li><li><p>其他命令</p><ul><li>显示操作系统的有关信息，<code>uname</code>, 例：<code>uname -a</code></li><li>清除屏幕或窗口内容, <code>clear</code></li><li>显示当前所有设置过的环境变量, <code>env</code></li><li>列出当前登录的所有用户, <code>who</code></li><li>显示当前正进行操作的用户名, <code>whoami</code></li><li>显示终端或伪终端的名称, <code>tty</code></li><li>显示或重置控制键定义, <code>stty</code>, 例：<code>stty -a</code></li><li>查询磁盘使用情况, <code>du</code>, 例：<code>du -k subdir</code></li><li>显示文件系统的总空间和可用空间, <code>df /tmp</code></li><li>显示当前系统活动的总信息, <code>w</code></li></ul></li></ul>]]></content>
    
    
    <summary type="html">这篇博客将记录使用 mac 过程中常用的命令。</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="mac" scheme="https://blog.oulafen.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Mac快速搭建前端开发环境</title>
    <link href="https://blog.oulafen.com/2016/02/24/frontend-mac-installing/"/>
    <id>https://blog.oulafen.com/2016/02/24/frontend-mac-installing/</id>
    <published>2016-02-24T14:52:29.000Z</published>
    <updated>2021-10-22T17:07:12.736Z</updated>
    
    <content type="html"><![CDATA[<p>用了2年的windows做开发，如今有了高大上的配置，也跟着高大上一把吧，在设备到来之前，提前做下功课，如何在mac中快速搭建前端开发环境。</p><p>前端需要什么环境啊，貌似随便一个编辑器、一个可调式的浏览器就可以，话是这么说，但作为如今跟得上时代的前端，这还是远远不够的。<br><a id="more"></a><br>如下是搜集的一张前端技能图<br><img width="100%" src="http://statics.oulafen.com/gitblogfrontend.jpg"><br>乍一看，真的好多啊，还是列出来急需的几个工具吧</p><ul><li>sublime</li><li>webstorm</li><li>git</li><li>nodejs</li><li>photoshop</li></ul><h2 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h2><p><a href="https://sublimetext.com/3" target="_blank" rel="noopener">官方网站戳这里</a></p><p>安装插件：</p><ol><li><p>安装package control组件：打开sublime text3后按快捷键control+`后下面会出来东西，然后输入如下命令，回车并重启。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request,<span class="built_in">os</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); <span class="built_in">open</span>(<span class="built_in">os</span>.<span class="built_in">path</span>.join(ipp, pf), <span class="string">'wb'</span>).<span class="built_in">write</span>(urllib.request.urlopen( <span class="string">'http://sublime.wbond.net/'</span> + pf.replace(<span class="string">' '</span>,<span class="string">'%20'</span>)).<span class="built_in">read</span>())</span><br></pre></td></tr></table></figure></li><li><p>快捷键<code>command+shift+p</code>后会出来列表，找到<code>Package Control:Install Package</code>。呆一会会出来插件列表，这个地方搜索你要找的插件名称。</p></li><li>插件介绍<ul><li>SideBarEnhancements：侧边栏按目录显示</li><li>Emmet：编码快捷键，前端必备</li><li>Zen Coding：不解释</li><li>JS Format：js代码格式化</li><li>HTML5 / HTMLattributes：这两个插件对弥补了sublime对html5支持度不足的缺陷</li><li>CodeFormatter：可以对html、JS、CSS、PHP、python代码格式化的插件</li><li>Bracket Highlighter：代码匹配，可匹配[], (), {}, “”, ”, <tag></tag>，高亮标记</li><li>sublimeCodeIntel：代码补全</li><li>Git：git管理</li><li>jQuery：jQ函数提示</li><li>AutoFileName：快速输入文件名</li><li>Minify：压缩JS</li><li>Nodejs：node代码提示</li><li>GBK Encoding Support：中文识别</li></ul></li></ol><p>查看更多插件，<a href="http://www.xuanfengge.com/practical-collection-of-sublime-plug-in.html" target="_blank" rel="noopener">戳这里</a></p><h2 id="webstorm"><a href="#webstorm" class="headerlink" title="webstorm"></a>webstorm</h2><p>下载地址：<a href="http://pan.baidu.com/s/1eR7upBO" target="_blank" rel="noopener">http://pan.baidu.com/s/1eR7upBO</a><br>提取密码：9qyq<br>Licence server：“<a href="http://15.idea.lanyus.com/”" target="_blank" rel="noopener">http://15.idea.lanyus.com/”</a></p><h2 id="photoshop"><a href="#photoshop" class="headerlink" title="photoshop"></a>photoshop</h2><p>下载地址：<a href="http://pan.baidu.com/s/1i50cLFJ" target="_blank" rel="noopener">http://pan.baidu.com/s/1i50cLFJ</a><br>提取密码：6h7s<br>破解教程：<a href="http://www.nowmac.com/soft/design/graphic/Photoshop-CC.html" target="_blank" rel="noopener">戳这里</a></p><h2 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h2><p>下载地址：<a href="http://pan.baidu.com/s/1kVjJHLt" target="_blank" rel="noopener">http://pan.baidu.com/s/1kVjJHLt</a><br>提取密码：68rd</p><p>安装后在terminal中查看版本 <code>node -v</code>,出现版本信息表明已安装成功。</p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>mac中已集成git环境，可直接在终端中使用。<br>关于git的命令，可查看我的另一篇博文<a href="http://oulafen.github.io/2016/01/04/git-commands/" target="_blank" rel="noopener">git命令速查</a>。</p>]]></content>
    
    
    <summary type="html">在Mac中搭建前端开发环境</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="前端" scheme="https://blog.oulafen.com/tags/前端/"/>
    
  </entry>
  
  <entry>
    <title>快速安装npm安装包</title>
    <link href="https://blog.oulafen.com/2016/01/12/npm-to-cnpm/"/>
    <id>https://blog.oulafen.com/2016/01/12/npm-to-cnpm/</id>
    <published>2016-01-12T12:58:29.000Z</published>
    <updated>2021-10-22T17:10:32.684Z</updated>
    
    <content type="html"><![CDATA[<p>不翻墙的情况下，使用npm直接安装依赖时，有没有很让人捉急，那么在有没有什么办法呢？</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>npm全称：<code>node package manager</code>，即“node包管理器”；见名知意，还不晓得的，快谷歌。</p><h3 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h3><p>国内使用 npm 速度很慢，so我们可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g cnpm --registry=https://registry.<span class="built_in">npm</span>.taobao.org</span><br></pre></td></tr></table></figure></p><p>或者直接通过添加 npm 参数 alias 一个新命令:<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alias</span> cnpm=<span class="string">"npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="string">--cache=$HOME/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="string">--disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="string">--userconfig=$HOME/.cnpmrc"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Or alias it in .bashrc or .zshrc</span></span><br><span class="line">$ <span class="keyword">echo</span> '\n<span class="comment">#alias for cnpm\nalias cnpm="npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line">  <span class="params">--cache=</span>$HOME/<span class="string">.npm/.cache/cnpm</span> \</span><br><span class="line">  <span class="params">--disturl=https</span>:<span class="string">//npm.taobao.org/dist</span> \</span><br><span class="line">  <span class="params">--userconfig=</span>$HOME/<span class="string">.cnpmrc</span><span class="string">"' &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc</span></span><br></pre></td></tr></table></figure></p><h3 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm <span class="keyword">install</span> [<span class="keyword">name</span>]</span><br></pre></td></tr></table></figure><p>更多请看<a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝NPM镜像</a></p>]]></content>
    
    
    <summary type="html">国内快速安装npm包</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="node" scheme="https://blog.oulafen.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>前端实现截图并预览的效果</title>
    <link href="https://blog.oulafen.com/2016/01/07/crop-image/"/>
    <id>https://blog.oulafen.com/2016/01/07/crop-image/</id>
    <published>2016-01-07T02:53:14.000Z</published>
    <updated>2021-10-22T17:06:20.363Z</updated>
    
    <content type="html"><![CDATA[<p>关于截图，已有不少插件，比如Jcrop、imageAreaSelect等等，但功能都不是很全，本文在 imageAreaSelect 的基础上做了一些改进，具体实现如下功能（纯前端）：</p><ul><li>在标签中自定义裁切后的长宽，方便代码复用</li><li>在裁切框中，图片自适应</li><li>可连续选择同一张图片</li><li>前端进行裁图并显示出来</li><li>限制图片大小<a id="more"></a></li></ul><h2 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h2><p>演示地址 戳<a href="http://blog.oulafen.com/demo/crop-image/">这里</a></p><p>点击上传图片：<br><img alt="点击上传图片" src="http://statics.oulafen.com/gitblog-crop-2.jpg"></p><p>裁图：<br><img alt="裁图" src="http://statics.oulafen.com/gitblog-crop-1.jpg"></p><p>预览裁后结果：<br><img alt="预览裁后结果" src="http://statics.oulafen.com/gitblog-crop-3.jpg"></p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h3><p>配置html：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">"display:none"</span> <span class="attr">type</span>=<span class="string">"file"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">id</span>=<span class="string">"imgInput"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">onchange</span>=<span class="string">"imgCrop.change(this)"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">data-width</span>=<span class="string">"380"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">data-height</span>=<span class="string">"380"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">data-previd</span>=<span class="string">"imgPrev"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">data-maxsize</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">class</span>=<span class="string">"image-show J-upload-img-btn"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">data-target</span>=<span class="string">"imgInput"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload-img-box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>上传图片<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"img-desc"</span>&gt;</span>支持小于2M，格式为jpg、png的图片，分辨率为380*380px<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-prev"</span> <span class="attr">id</span>=<span class="string">"imgPrev"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>裁切框：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade crop-modal J-crop-modal"</span> <span class="attr">data-backdrop</span>=<span class="string">"static"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"image-box"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"preview-box"</span> <span class="attr">style</span>=<span class="string">"width:150px;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"J-canvas"</span> <span class="attr">style</span>=<span class="string">"overflow:hidden; display:none"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"crop-btns"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">class</span>=<span class="string">"btn confirm-btn J-confirm-btn"</span> <span class="attr">onclick</span>=<span class="string">"imgCrop.confirm()"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">class</span>=<span class="string">"btn cancel-btn"</span>  <span class="attr">onclick</span>=<span class="string">"imgCrop.cancel()"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在dom底部加载js：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery-1.11.3.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>      <span class="comment">&lt;!--用到了模态框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery.imgareaselect.pack.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>     <span class="comment">&lt;!--imgAreaSelect文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/img-crop.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>      <span class="comment">&lt;!--实现crop的功能文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        imgCrop.init(<span class="string">'.J-upload-img-btn'</span>);   <span class="comment">//初始化crop事件</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>说明：<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#html设置</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">"display:none"</span> <span class="attr">type</span>=<span class="string">"file"</span></span></span></span><br><span class="line"><span class="xml">       id="文件输入ID"</span></span><br><span class="line"><span class="xml">       onchange="imgCrop.change(this)"</span></span><br><span class="line"><span class="xml">       data-width="要裁切的宽度，/px"</span></span><br><span class="line"><span class="xml">       data-height="要裁切的高度，/px"</span></span><br><span class="line"><span class="xml">       data-previd="裁切后要显示在哪儿的ID"</span></span><br><span class="line"><span class="xml">       data-maxsize="图片大小设置，/M"&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span></span></span></span><br><span class="line"><span class="xml">   class="image-show J-upload-img-btn"</span></span><br><span class="line"><span class="xml">   data-target="文件输入ID"&gt;</span></span><br><span class="line"><span class="code">    &lt;div class="upload-img-box"&gt;</span></span><br><span class="line"><span class="code">        &lt;span&gt;上传图片&lt;/span&gt;</span></span><br><span class="line"><span class="code">    &lt;/div&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"img-desc"</span>&gt;</span></span>支持小于2M，格式为jpg、png的图片，分辨率为380*380px<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-prev"</span> <span class="attr">id</span>=<span class="string">"裁切后要显示在哪儿的ID"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>原理：</p><ul><li><p>裁切原理：<br>其实是用canvas根据尺寸重绘一张图</p></li><li><p>预览原理：<br>将图片转成base64，直接载到img的src中</p></li><li><p>连续选择同一张图片进行裁切的原理：<br>裁切时用到的的重要的事件是change，而两次连续相同的选择是不会触发这个事件的，而直接重新绑定change事件，本银试过了，不行，应为value值不能真正的被清空，还涉及到兼容性问题，妈呀，头好大，怎么办呢？其实~~~很简单，用replace重新替换下，然后再重绑change就可以了。</p></li></ul><h2 id="分解"><a href="#分解" class="headerlink" title="分解"></a>分解</h2><h3 id="获取文件大小"><a href="#获取文件大小" class="headerlink" title="获取文件大小"></a>获取文件大小</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">getFileSize : <span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> fileSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (self.isIE &amp;&amp; !o.files) &#123;    <span class="comment">// IE浏览器</span></span><br><span class="line">        <span class="keyword">var</span> filePath = o.value; <span class="comment">// 获得上传文件的绝对路径</span></span><br><span class="line">        <span class="keyword">var</span> fileSystem = <span class="keyword">new</span> ActiveXObject(<span class="string">"Scripting.FileSystemObject"</span>);</span><br><span class="line">        <span class="comment">// GetFile(path) 方法从磁盘获取一个文件并返回。</span></span><br><span class="line">        <span class="keyword">var</span> file = fileSystem.GetFile(filePath);</span><br><span class="line">        fileSize = file.Size;    <span class="comment">// 文件大小，单位：b</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;    <span class="comment">// 非IE浏览器</span></span><br><span class="line">        fileSize = o.files[<span class="number">0</span>].size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fileSize / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用canvas模拟裁图"><a href="#使用canvas模拟裁图" class="headerlink" title="使用canvas模拟裁图"></a>使用canvas模拟裁图</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> size = cropImgSize;</span><br><span class="line"><span class="keyword">var</span> cropModalObj = $(<span class="string">".J-crop-modal"</span>);</span><br><span class="line"><span class="keyword">var</span> primary_width = cropModalObj.find(<span class="string">".image-box img"</span>).width();</span><br><span class="line"><span class="keyword">var</span> sourseImg = <span class="keyword">new</span> Image();</span><br><span class="line">sourseImg.src = cropModalObj.find(<span class="string">".image-box img"</span>).attr(<span class="string">'src'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> R = sourseImg.width / primary_width;</span><br><span class="line"><span class="keyword">var</span> canvas = cropModalObj.find(<span class="string">".J-canvas"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">context.drawImage(sourseImg, size.x1 * R, size.y1 * R, size.w * R, size.h * R, <span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#'</span>+prevID)</span><br><span class="line">    .html(<span class="string">''</span>)</span><br><span class="line">    .append(<span class="string">"&lt;img src='"</span> + canvas.toDataURL(<span class="string">'image/jpeg'</span>,<span class="number">0.8</span>) + <span class="string">"'/&gt;"</span>);</span><br></pre></td></tr></table></figure><h3 id="图片转base64渲染"><a href="#图片转base64渲染" class="headerlink" title="图片转base64渲染"></a>图片转base64渲染</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!self.isIE) &#123;</span><br><span class="line">    <span class="keyword">var</span> file = o.files[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">        img.src = reader.result;</span><br><span class="line">        self.setCropImgSize(img.width, img.height);</span><br><span class="line">        imgModalObj.find(<span class="string">'.image-box img'</span>).attr(<span class="string">'src'</span>, reader.result);</span><br><span class="line">        imgModalObj.find(<span class="string">'.preview-box img'</span>).attr(<span class="string">'src'</span>, reader.result);</span><br><span class="line">    &#125;;</span><br><span class="line">    reader.readAsDataURL(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.cnblogs.com/fsjohnhuang/p/3925827.html" target="_blank" rel="noopener">阅读更多</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>代码地址，戳<a href="https://gitcafe.com/oulafen/demo/tree/gitcafe-pages/crop-image" target="_blank" rel="noopener">这里</a></p><p>修改<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">"display:none"</span> <span class="attr">type</span>=<span class="string">"file"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">"imgInput"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">onchange</span>=<span class="string">"imgCrop.change(this)"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">data-width</span>=<span class="string">"380"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">data-height</span>=<span class="string">"380"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">data-previd</span>=<span class="string">"imgPrev"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">data-maxsize</span>=<span class="string">"2"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>为<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">"display:none"</span> <span class="attr">type</span>=<span class="string">"file"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">"imgInput"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">onchange</span>=<span class="string">"imgCrop.change(this)"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">data-width</span>=<span class="string">"540"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">data-height</span>=<span class="string">"300"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">data-previd</span>=<span class="string">"imgPrev"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">data-maxsize</span>=<span class="string">"2"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>后，裁切效果如下：</p><p>裁图：<br><img alt="修改尺寸后裁图" src="http://statics.oulafen.com/gitblog-crop-4.jpg"></p><p>预览裁后结果：<br><img alt="修改尺寸后预览裁后结果" src="http://statics.oulafen.com/gitblog-crop-5.jpg"></p><p>O(∩_∩)O哈哈~~~~是不是很好玩。。。<br>还在路上，欢迎指正</p>]]></content>
    
    
    <summary type="html">前端截图功能详解</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="前端" scheme="https://blog.oulafen.com/tags/前端/"/>
    
  </entry>
  
  <entry>
    <title>一段好用的代码，瞬间解决html复用问题</title>
    <link href="https://blog.oulafen.com/2016/01/06/tpl-html-reuse/"/>
    <id>https://blog.oulafen.com/2016/01/06/tpl-html-reuse/</id>
    <published>2016-01-06T09:28:40.000Z</published>
    <updated>2021-10-22T17:10:32.683Z</updated>
    
    <content type="html"><![CDATA[<p>本文旨在解决js中插入dom时的html复用问题<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>如下图这样：<br><img width="100%" src="http://statics.oulafen.com/gitblog-tpl-add-member.jpg"><br>点击添加新成员按钮时，在页面中再插入一块成员表单，一般的做法可能是这样的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.box'</span>).append(<span class="string">'&lt;div class="row"&gt;&lt;div class="col-xs-2 form-label"&gt;成员姓名&lt;/div&gt;&lt;div class="col-xs-5"&gt;&lt;input class="form-control" type="text" name="" &gt;&lt;/div&gt;&lt;div class="col-xs-5 tip J-tip"&gt;&lt;div class="tip-box"&gt;&lt;p class="J-tip-content"&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'</span>);</span><br></pre></td></tr></table></figure></p><p>尤其是内容很长并且还有动态变化的内容时，想想都头疼吧。</p><p><strong>重点 重点 重点：</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.tpl = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">tmpl</span>(<span class="params">str, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> fn = !<span class="regexp">/\W/</span>.test(str) ?</span><br><span class="line">            cache[str] = cache[str] ||</span><br><span class="line">                tpl(<span class="built_in">document</span>.getElementById(str).innerHTML) :</span><br><span class="line">            <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"obj"</span>,</span><br><span class="line">                <span class="string">"var p=[],print=function()&#123;p.push.apply(p,arguments);&#125;;"</span> +</span><br><span class="line">                <span class="string">"with(obj)&#123;p.push('"</span> +</span><br><span class="line">                str</span><br><span class="line">                    .replace(<span class="regexp">/[\r\t\n]/g</span>, <span class="string">" "</span>)</span><br><span class="line">                    .split(<span class="string">"&lt;%"</span>).join(<span class="string">"\t"</span>)</span><br><span class="line">                    .replace(<span class="regexp">/((^|%&gt;)[^\t]*)'/g</span>, <span class="string">"$1\r"</span>)</span><br><span class="line">                    .replace(<span class="regexp">/\t=(.*?)%&gt;/g</span>, <span class="string">"',$1,'"</span>)</span><br><span class="line">                    .split(<span class="string">"\t"</span>).join(<span class="string">"');"</span>)</span><br><span class="line">                    .split(<span class="string">"%&gt;"</span>).join(<span class="string">"p.push('"</span>)</span><br><span class="line">                    .split(<span class="string">"\r"</span>).join(<span class="string">"\\'"</span>)</span><br><span class="line">                + <span class="string">"');&#125;return p.join('');"</span>);</span><br><span class="line">        <span class="keyword">return</span> data ? fn(data) : fn;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>这可是段神奇的代码，有了它js中再也见不到 html 的身影了。</p><p><strong>用法：</strong></p><p>将要复用的 html 写在 dom 流中，用 <code>&lt;script&gt;</code> 标签包上，定义一个非官方定义的 type 及 id，如下：<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"tpl"</span> <span class="attr">id</span>=<span class="string">"memberTpl"</span>&gt;</span></span><br><span class="line"><span class="javascript">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"block-box J-member-box"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">class</span>=<span class="string">"delete-btn J-delete-member-btn"</span> <span class="attr">title</span>=<span class="string">"删除"</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-xs-2 form-label"</span>&gt;成员姓名&lt;<span class="regexp">/div&gt;</span></span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-xs-5"</span>&gt;</span></span><br><span class="line"><span class="javascript">                &lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> type=<span class="string">"text"</span> name=<span class="string">""</span> &gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-xs-5 tip J-tip"</span>&gt;</span></span><br><span class="line"><span class="javascript">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"tip-box"</span>&gt;</span></span><br><span class="line"><span class="javascript">                    &lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"J-tip-content"</span>&gt;&lt;<span class="regexp">/p&gt;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-xs-2 form-label"</span>&gt;成员职位&lt;<span class="regexp">/div&gt;</span></span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-xs-5"</span>&gt;</span></span><br><span class="line"><span class="javascript">                &lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> type=<span class="string">"text"</span> name=<span class="string">""</span> &gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-xs-5 tip J-tip"</span>&gt;</span></span><br><span class="line"><span class="javascript">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"tip-box"</span>&gt;</span></span><br><span class="line"><span class="javascript">                    &lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"J-tip-content"</span>&gt;&lt;<span class="regexp">/p&gt;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-xs-2 form-label"</span>&gt;个人简介&lt;<span class="regexp">/div&gt;</span></span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-xs-5"</span>&gt;</span></span><br><span class="line"><span class="javascript">                &lt;textarea <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> name=<span class="string">""</span> &gt;&lt;<span class="regexp">/textarea&gt;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-xs-5 tip tip-h J-tip "</span>&gt;</span></span><br><span class="line"><span class="javascript">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"tip-box"</span>&gt;</span></span><br><span class="line"><span class="javascript">                    &lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"J-tip-content"</span>&gt;&lt;<span class="regexp">/p&gt;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row image"</span>&gt;</span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-xs-2 form-label"</span>&gt;个人头像&lt;<span class="regexp">/div&gt;</span></span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-xs-5"</span>&gt;</span></span><br><span class="line"><span class="javascript">                &lt;a href=<span class="string">"javascript:void(0);"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"image-show J-upload-img-btn"</span> id=<span class="string">"memberImgPrev"</span> data-target=<span class="string">"memberImgInput"</span>&gt;</span></span><br><span class="line"><span class="javascript">                    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"upload-img-box"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>上传图片<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">                &lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"img-desc"</span>&gt;支持小于<span class="number">2</span>M，格式为jpg、png的图片，分辨率为<span class="number">540</span>*<span class="number">300</span>px&lt;<span class="regexp">/p&gt;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-xs-5 tip tip-h J-tip"</span>&gt;</span></span><br><span class="line"><span class="javascript">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"tip-box"</span>&gt;</span></span><br><span class="line"><span class="javascript">                    &lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"J-tip-content"</span>&gt;&lt;<span class="regexp">/p&gt;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后把那段<strong>重点代码</strong>贴到 js 中，并在 js 中调用定义好的 tpl 接口：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tplHtml = tpl(<span class="string">'memberTpl'</span>);      <span class="comment">//生成html代码</span></span><br><span class="line">$(<span class="string">'.J-members-box'</span>).append(tplHtml);  <span class="comment">//追加到dom块中</span></span><br></pre></td></tr></table></figure></p><p>至此基本用法就完成了。<br>查看在线显示？ <a href="http://oulafen.gitcafe.io/demo/tpl/" target="_blank" rel="noopener">戳戳戳</a><br>要源码？ <a href="https://gitcafe.com/oulafen/demo/tree/gitcafe-pages/tpl" target="_blank" rel="noopener">戳戳戳</a> </p><h2 id="升级用法"><a href="#升级用法" class="headerlink" title="升级用法"></a>升级用法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"cityBox"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"tpl"</span> <span class="attr">id</span>=<span class="string">"cityModal"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span>  <span class="attr">data-id</span>=<span class="string">"&lt;%=id%&gt;"</span> <span class="attr">data-code</span>=<span class="string">"&lt;%=code%&gt;"</span> <span class="attr">value</span>=<span class="string">"&lt;%=name%&gt;"</span>/&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上<code>&lt;%=变量%&gt;</code>中的变量可以动态赋值；<br>这常用于使用 ajax 获取到多个想似的子资源后，动态渲染到页面上；<br>也常出现在for循环中；<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cityHtml = tpl(<span class="string">'cityModal'</span>, &#123;<span class="attr">id</span>: <span class="number">0</span>, <span class="attr">code</span>: <span class="number">111</span>, <span class="attr">value</span>: <span class="string">"北京"</span>&#125;);</span><br><span class="line">$(<span class="string">'#cityBox'</span>).append(cityHtml);</span><br></pre></td></tr></table></figure></p><p><strong>优点：</strong></p><ul><li>便于修改模板</li><li>使 js 与 html 分离，代码清晰</li><li>这还不够？对于追求美感的攻城狮来讲，可帮大忙了。。。</li></ul><p><strong>注意：</strong></p><ul><li>定义的 html 模版中不能出现单引号，否则会报错</li><li>变量也可以用 hash，如：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"tpl"</span> <span class="attr">id</span>=<span class="string">"cityModal"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span>  <span class="attr">data-id</span>=<span class="string">"&lt;%=city.id%&gt;"</span> <span class="attr">data-code</span>=<span class="string">"&lt;%=city.code%&gt;"</span> <span class="attr">value</span>=<span class="string">"&lt;%=city.name%&gt;"</span>/&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">解决前端js插入html复用问题</summary>
    
    
    
    <category term="blog" scheme="https://blog.oulafen.com/categories/blog/"/>
    
    
    <category term="前端" scheme="https://blog.oulafen.com/tags/前端/"/>
    
  </entry>
  
</feed>
